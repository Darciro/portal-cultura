!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.Popper=e()}(this,function(){"use strict";for(var t="undefined"!=typeof window&&"undefined"!=typeof document,e=["Edge","Trident","Firefox"],n=0,i=0;i<e.length;i+=1)if(t&&navigator.userAgent.indexOf(e[i])>=0){n=1;break}var o=t&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},n))}};function s(t){return t&&"[object Function]"==={}.toString.call(t)}function r(t,e){if(1!==t.nodeType)return[];var n=getComputedStyle(t,null);return e?n[e]:n}function a(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function l(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=r(t),n=e.overflow,i=e.overflowX,o=e.overflowY;return/(auto|scroll|overlay)/.test(n+o+i)?t:l(a(t))}var c=t&&!(!window.MSInputMethodContext||!document.documentMode),h=t&&/MSIE 10/.test(navigator.userAgent);function u(t){return 11===t?c:10===t?h:c||h}function d(t){if(!t)return document.documentElement;for(var e=u(10)?document.body:null,n=t.offsetParent;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var i=n&&n.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TD","TABLE"].indexOf(n.nodeName)&&"static"===r(n,"position")?d(n):n:t?t.ownerDocument.documentElement:document.documentElement}function f(t){return null!==t.parentNode?f(t.parentNode):t}function p(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?t:e,o=n?e:t,s=document.createRange();s.setStart(i,0),s.setEnd(o,0);var r,a,l=s.commonAncestorContainer;if(t!==l&&e!==l||i.contains(o))return"BODY"===(a=(r=l).nodeName)||"HTML"!==a&&d(r.firstElementChild)!==r?d(l):l;var c=f(t);return c.host?p(c.host,e):p(t,f(e).host)}function g(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var i=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||i)[e]}return t[e]}function m(t,e){var n="x"===e?"Left":"Top",i="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+i+"Width"],10)}function v(t,e,n,i){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],u(10)?parseInt(n["offset"+t])+parseInt(i["margin"+("Height"===t?"Top":"Left")])+parseInt(i["margin"+("Height"===t?"Bottom":"Right")]):0)}function b(t){var e=t.body,n=t.documentElement,i=u(10)&&getComputedStyle(n);return{height:v("Height",e,n,i),width:v("Width",e,n,i)}}var y=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},_=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),w=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},x=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t};function E(t){return x({},t,{right:t.left+t.width,bottom:t.top+t.height})}function C(t){var e={};try{if(u(10)){e=t.getBoundingClientRect();var n=g(t,"top"),i=g(t,"left");e.top+=n,e.left+=i,e.bottom+=n,e.right+=i}else e=t.getBoundingClientRect()}catch(t){}var o={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},s="HTML"===t.nodeName?b(t.ownerDocument):{},a=s.width||t.clientWidth||o.right-o.left,l=s.height||t.clientHeight||o.bottom-o.top,c=t.offsetWidth-a,h=t.offsetHeight-l;if(c||h){var d=r(t);c-=m(d,"x"),h-=m(d,"y"),o.width-=c,o.height-=h}return E(o)}function T(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=u(10),o="HTML"===e.nodeName,s=C(t),a=C(e),c=l(t),h=r(e),d=parseFloat(h.borderTopWidth,10),f=parseFloat(h.borderLeftWidth,10);n&&o&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var p=E({top:s.top-a.top-d,left:s.left-a.left-f,width:s.width,height:s.height});if(p.marginTop=0,p.marginLeft=0,!i&&o){var m=parseFloat(h.marginTop,10),v=parseFloat(h.marginLeft,10);p.top-=d-m,p.bottom-=d-m,p.left-=f-v,p.right-=f-v,p.marginTop=m,p.marginLeft=v}return(i&&!n?e.contains(c):e===c&&"BODY"!==c.nodeName)&&(p=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=g(e,"top"),o=g(e,"left"),s=n?-1:1;return t.top+=i*s,t.bottom+=i*s,t.left+=o*s,t.right+=o*s,t}(p,e)),p}function S(t){if(!t||!t.parentElement||u())return document.documentElement;for(var e=t.parentElement;e&&"none"===r(e,"transform");)e=e.parentElement;return e||document.documentElement}function I(t,e,n,i){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],s={top:0,left:0},c=o?S(t):p(t,e);if("viewport"===i)s=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,i=T(t,n),o=Math.max(n.clientWidth,window.innerWidth||0),s=Math.max(n.clientHeight,window.innerHeight||0),r=e?0:g(n),a=e?0:g(n,"left");return E({top:r-i.top+i.marginTop,left:a-i.left+i.marginLeft,width:o,height:s})}(c,o);else{var h=void 0;"scrollParent"===i?"BODY"===(h=l(a(e))).nodeName&&(h=t.ownerDocument.documentElement):h="window"===i?t.ownerDocument.documentElement:i;var u=T(h,c,o);if("HTML"!==h.nodeName||function t(e){var n=e.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===r(e,"position")||t(a(e)))}(c))s=u;else{var d=b(t.ownerDocument),f=d.height,m=d.width;s.top+=u.top-u.marginTop,s.bottom=f+u.top,s.left+=u.left-u.marginLeft,s.right=m+u.left}}var v="number"==typeof(n=n||0);return s.left+=v?n:n.left||0,s.top+=v?n:n.top||0,s.right-=v?n:n.right||0,s.bottom-=v?n:n.bottom||0,s}function A(t,e,n,i,o){var s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var r=I(n,i,s,o),a={top:{width:r.width,height:e.top-r.top},right:{width:r.right-e.right,height:r.height},bottom:{width:r.width,height:r.bottom-e.bottom},left:{width:e.left-r.left,height:r.height}},l=Object.keys(a).map(function(t){return x({key:t},a[t],{area:(e=a[t],e.width*e.height)});var e}).sort(function(t,e){return e.area-t.area}),c=l.filter(function(t){var e=t.width,i=t.height;return e>=n.clientWidth&&i>=n.clientHeight}),h=c.length>0?c[0].key:l[0].key,u=t.split("-")[1];return h+(u?"-"+u:"")}function D(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return T(n,i?S(e):p(e,n),i)}function P(t){var e=getComputedStyle(t),n=parseFloat(e.marginTop)+parseFloat(e.marginBottom),i=parseFloat(e.marginLeft)+parseFloat(e.marginRight);return{width:t.offsetWidth+i,height:t.offsetHeight+n}}function $(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function O(t,e,n){n=n.split("-")[0];var i=P(t),o={width:i.width,height:i.height},s=-1!==["right","left"].indexOf(n),r=s?"top":"left",a=s?"left":"top",l=s?"height":"width",c=s?"width":"height";return o[r]=e[r]+e[l]/2-i[l]/2,o[a]=n===a?e[a]-i[c]:e[$(a)],o}function k(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function N(t,e,n){return(void 0===n?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===n});var i=k(t,function(t){return t[e]===n});return t.indexOf(i)}(t,"name",n))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=t.function||t.fn;t.enabled&&s(n)&&(e.offsets.popper=E(e.offsets.popper),e.offsets.reference=E(e.offsets.reference),e=n(e,t))}),e}function L(t,e){return t.some(function(t){var n=t.name;return t.enabled&&n===e})}function M(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),i=0;i<e.length;i++){var o=e[i],s=o?""+o+n:t;if(void 0!==document.body.style[s])return s}return null}function F(t){var e=t.ownerDocument;return e?e.defaultView:window}function H(t,e,n,i){n.updateBound=i,F(t).addEventListener("resize",n.updateBound,{passive:!0});var o=l(t);return function t(e,n,i,o){var s="BODY"===e.nodeName,r=s?e.ownerDocument.defaultView:e;r.addEventListener(n,i,{passive:!0}),s||t(l(r.parentNode),n,i,o),o.push(r)}(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function R(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,F(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function j(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function W(t,e){Object.keys(e).forEach(function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&j(e[n])&&(i="px"),t.style[n]=e[n]+i})}function B(t,e,n){var i=k(t,function(t){return t.name===e}),o=!!i&&t.some(function(t){return t.name===n&&t.enabled&&t.order<i.order});if(!o){var s="`"+e+"`",r="`"+n+"`";console.warn(r+" modifier is required by "+s+" modifier in order to work, be sure to include it before "+s+"!")}return o}var q=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],z=q.slice(3);function U(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=z.indexOf(t),i=z.slice(n+1).concat(z.slice(0,n));return e?i.reverse():i}var Y={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function V(t,e,n,i){var o=[0,0],s=-1!==["right","left"].indexOf(i),r=t.split(/(\+|\-)/).map(function(t){return t.trim()}),a=r.indexOf(k(r,function(t){return-1!==t.search(/,|\s/)}));r[a]&&-1===r[a].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,c=-1!==a?[r.slice(0,a).concat([r[a].split(l)[0]]),[r[a].split(l)[1]].concat(r.slice(a+1))]:[r];return(c=c.map(function(t,i){var o=(1===i?!s:s)?"height":"width",r=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,r=!0,t):r?(t[t.length-1]+=e,r=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,n,i){var o=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),s=+o[1],r=o[2];if(!s)return t;if(0===r.indexOf("%")){var a=void 0;switch(r){case"%p":a=n;break;case"%":case"%r":default:a=i}return E(a)[e]/100*s}if("vh"===r||"vw"===r)return("vh"===r?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*s;return s}(t,o,e,n)})})).forEach(function(t,e){t.forEach(function(n,i){j(n)&&(o[e]+=n*("-"===t[i-1]?-1:1))})}),o}var K={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],i=e.split("-")[1];if(i){var o=t.offsets,s=o.reference,r=o.popper,a=-1!==["bottom","top"].indexOf(n),l=a?"left":"top",c=a?"width":"height",h={start:w({},l,s[l]),end:w({},l,s[l]+s[c]-r[c])};t.offsets.popper=x({},r,h[i])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,i=t.placement,o=t.offsets,s=o.popper,r=o.reference,a=i.split("-")[0],l=void 0;return l=j(+n)?[+n,0]:V(n,s,r,a),"left"===a?(s.top+=l[0],s.left-=l[1]):"right"===a?(s.top+=l[0],s.left+=l[1]):"top"===a?(s.left+=l[0],s.top-=l[1]):"bottom"===a&&(s.left+=l[0],s.top+=l[1]),t.popper=s,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var n=e.boundariesElement||d(t.instance.popper);t.instance.reference===n&&(n=d(n));var i=M("transform"),o=t.instance.popper.style,s=o.top,r=o.left,a=o[i];o.top="",o.left="",o[i]="";var l=I(t.instance.popper,t.instance.reference,e.padding,n,t.positionFixed);o.top=s,o.left=r,o[i]=a,e.boundaries=l;var c=e.priority,h=t.offsets.popper,u={primary:function(t){var n=h[t];return h[t]<l[t]&&!e.escapeWithReference&&(n=Math.max(h[t],l[t])),w({},t,n)},secondary:function(t){var n="right"===t?"left":"top",i=h[n];return h[t]>l[t]&&!e.escapeWithReference&&(i=Math.min(h[n],l[t]-("right"===t?h.width:h.height))),w({},n,i)}};return c.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";h=x({},h,u[e](t))}),t.offsets.popper=h,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,i=e.reference,o=t.placement.split("-")[0],s=Math.floor,r=-1!==["top","bottom"].indexOf(o),a=r?"right":"bottom",l=r?"left":"top",c=r?"width":"height";return n[a]<s(i[l])&&(t.offsets.popper[l]=s(i[l])-n[c]),n[l]>s(i[a])&&(t.offsets.popper[l]=s(i[a])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!B(t.instance.modifiers,"arrow","keepTogether"))return t;var i=e.element;if("string"==typeof i){if(!(i=t.instance.popper.querySelector(i)))return t}else if(!t.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var o=t.placement.split("-")[0],s=t.offsets,a=s.popper,l=s.reference,c=-1!==["left","right"].indexOf(o),h=c?"height":"width",u=c?"Top":"Left",d=u.toLowerCase(),f=c?"left":"top",p=c?"bottom":"right",g=P(i)[h];l[p]-g<a[d]&&(t.offsets.popper[d]-=a[d]-(l[p]-g)),l[d]+g>a[p]&&(t.offsets.popper[d]+=l[d]+g-a[p]),t.offsets.popper=E(t.offsets.popper);var m=l[d]+l[h]/2-g/2,v=r(t.instance.popper),b=parseFloat(v["margin"+u],10),y=parseFloat(v["border"+u+"Width"],10),_=m-t.offsets.popper[d]-b-y;return _=Math.max(Math.min(a[h]-g,_),0),t.arrowElement=i,t.offsets.arrow=(w(n={},d,Math.round(_)),w(n,f,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(L(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=I(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),i=t.placement.split("-")[0],o=$(i),s=t.placement.split("-")[1]||"",r=[];switch(e.behavior){case Y.FLIP:r=[i,o];break;case Y.CLOCKWISE:r=U(i);break;case Y.COUNTERCLOCKWISE:r=U(i,!0);break;default:r=e.behavior}return r.forEach(function(a,l){if(i!==a||r.length===l+1)return t;i=t.placement.split("-")[0],o=$(i);var c=t.offsets.popper,h=t.offsets.reference,u=Math.floor,d="left"===i&&u(c.right)>u(h.left)||"right"===i&&u(c.left)<u(h.right)||"top"===i&&u(c.bottom)>u(h.top)||"bottom"===i&&u(c.top)<u(h.bottom),f=u(c.left)<u(n.left),p=u(c.right)>u(n.right),g=u(c.top)<u(n.top),m=u(c.bottom)>u(n.bottom),v="left"===i&&f||"right"===i&&p||"top"===i&&g||"bottom"===i&&m,b=-1!==["top","bottom"].indexOf(i),y=!!e.flipVariations&&(b&&"start"===s&&f||b&&"end"===s&&p||!b&&"start"===s&&g||!b&&"end"===s&&m);(d||v||y)&&(t.flipped=!0,(d||v)&&(i=r[l+1]),y&&(s=function(t){return"end"===t?"start":"start"===t?"end":t}(s)),t.placement=i+(s?"-"+s:""),t.offsets.popper=x({},t.offsets.popper,O(t.instance.popper,t.offsets.reference,t.placement)),t=N(t.instance.modifiers,t,"flip"))}),t},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],i=t.offsets,o=i.popper,s=i.reference,r=-1!==["left","right"].indexOf(n),a=-1===["top","left"].indexOf(n);return o[r?"left":"top"]=s[n]-(a?o[r?"width":"height"]:0),t.placement=$(e),t.offsets.popper=E(o),t}},hide:{order:800,enabled:!0,fn:function(t){if(!B(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=k(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,i=e.y,o=t.offsets.popper,s=k(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==s&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var r=void 0!==s?s:e.gpuAcceleration,a=d(t.instance.popper),l=C(a),c={position:o.position},h={left:Math.floor(o.left),top:Math.round(o.top),bottom:Math.round(o.bottom),right:Math.floor(o.right)},u="bottom"===n?"top":"bottom",f="right"===i?"left":"right",p=M("transform"),g=void 0,m=void 0;if(m="bottom"===u?"HTML"===a.nodeName?-a.clientHeight+h.bottom:-l.height+h.bottom:h.top,g="right"===f?"HTML"===a.nodeName?-a.clientWidth+h.right:-l.width+h.right:h.left,r&&p)c[p]="translate3d("+g+"px, "+m+"px, 0)",c[u]=0,c[f]=0,c.willChange="transform";else{var v="bottom"===u?-1:1,b="right"===f?-1:1;c[u]=m*v,c[f]=g*b,c.willChange=u+", "+f}var y={"x-placement":t.placement};return t.attributes=x({},y,t.attributes),t.styles=x({},c,t.styles),t.arrowStyles=x({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return W(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach(function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)}),t.arrowElement&&Object.keys(t.arrowStyles).length&&W(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,i,o){var s=D(o,e,t,n.positionFixed),r=A(n.placement,s,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",r),W(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},Q=function(){function t(e,n){var i=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};y(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=o(this.update.bind(this)),this.options=x({},t.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(x({},t.Defaults.modifiers,r.modifiers)).forEach(function(e){i.options.modifiers[e]=x({},t.Defaults.modifiers[e]||{},r.modifiers?r.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return x({name:t},i.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&s(t.onLoad)&&t.onLoad(i.reference,i.popper,i.options,t,i.state)}),this.update();var a=this.options.eventsEnabled;a&&this.enableEventListeners(),this.state.eventsEnabled=a}return _(t,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=D(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=A(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=O(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=N(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,L(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[M("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=H(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return R.call(this)}}]),t}();return Q.Utils=("undefined"!=typeof window?window:global).PopperUtils,Q.placements=q,Q.Defaults=K,Q}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("jquery"),require("popper.js")):"function"==typeof define&&define.amd?define(["exports","jquery","popper.js"],e):e(t.bootstrap={},t.jQuery,t.Popper)}(this,function(t,e,n){"use strict";function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function o(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}function s(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),i.forEach(function(e){s(t,e,n[e])})}return t}e=e&&e.hasOwnProperty("default")?e.default:e,n=n&&n.hasOwnProperty("default")?n.default:n;var a=function(t){var e="transitionend";function n(e){var n=this,o=!1;return t(this).one(i.TRANSITION_END,function(){o=!0}),setTimeout(function(){o||i.triggerTransitionEnd(n)},e),this}var i={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");e&&"#"!==e||(e=t.getAttribute("href")||"");try{return document.querySelector(e)?e:null}catch(t){return null}},getTransitionDurationFromElement:function(e){if(!e)return 0;var n=t(e).css("transition-duration");return parseFloat(n)?(n=n.split(",")[0],1e3*parseFloat(n)):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(n){t(n).trigger(e)},supportsTransitionEnd:function(){return Boolean(e)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var o in n)if(Object.prototype.hasOwnProperty.call(n,o)){var s=n[o],r=e[o],a=r&&i.isElement(r)?"element":(l=r,{}.toString.call(l).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(s).test(a))throw new Error(t.toUpperCase()+': Option "'+o+'" provided type "'+a+'" but expected type "'+s+'".')}var l}};return t.fn.emulateTransitionEnd=n,t.event.special[i.TRANSITION_END]={bindType:e,delegateType:e,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}},i}(e),l=function(t){var e=t.fn.alert,n={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},i="alert",s="fade",r="show",l=function(){function e(t){this._element=t}var l=e.prototype;return l.close=function(t){var e=this._element;t&&(e=this._getRootElement(t)),this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},l.dispose=function(){t.removeData(this._element,"bs.alert"),this._element=null},l._getRootElement=function(e){var n=a.getSelectorFromElement(e),o=!1;return n&&(o=document.querySelector(n)),o||(o=t(e).closest("."+i)[0]),o},l._triggerCloseEvent=function(e){var i=t.Event(n.CLOSE);return t(e).trigger(i),i},l._removeElement=function(e){var n=this;if(t(e).removeClass(r),t(e).hasClass(s)){var i=a.getTransitionDurationFromElement(e);t(e).one(a.TRANSITION_END,function(t){return n._destroyElement(e,t)}).emulateTransitionEnd(i)}else this._destroyElement(e)},l._destroyElement=function(e){t(e).detach().trigger(n.CLOSED).remove()},e._jQueryInterface=function(n){return this.each(function(){var i=t(this),o=i.data("bs.alert");o||(o=new e(this),i.data("bs.alert",o)),"close"===n&&o[n](this)})},e._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},o(e,null,[{key:"VERSION",get:function(){return"4.1.3"}}]),e}();return t(document).on(n.CLICK_DATA_API,'[data-dismiss="alert"]',l._handleDismiss(new l)),t.fn.alert=l._jQueryInterface,t.fn.alert.Constructor=l,t.fn.alert.noConflict=function(){return t.fn.alert=e,l._jQueryInterface},l}(e),c=function(t){var e="button",n=t.fn[e],i="active",s="btn",r="focus",a='[data-toggle^="button"]',l='[data-toggle="buttons"]',c="input",h=".active",u=".btn",d={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},f=function(){function e(t){this._element=t}var n=e.prototype;return n.toggle=function(){var e=!0,n=!0,o=t(this._element).closest(l)[0];if(o){var s=this._element.querySelector(c);if(s){if("radio"===s.type)if(s.checked&&this._element.classList.contains(i))e=!1;else{var r=o.querySelector(h);r&&t(r).removeClass(i)}if(e){if(s.hasAttribute("disabled")||o.hasAttribute("disabled")||s.classList.contains("disabled")||o.classList.contains("disabled"))return;s.checked=!this._element.classList.contains(i),t(s).trigger("change")}s.focus(),n=!1}}n&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(i)),e&&t(this._element).toggleClass(i)},n.dispose=function(){t.removeData(this._element,"bs.button"),this._element=null},e._jQueryInterface=function(n){return this.each(function(){var i=t(this).data("bs.button");i||(i=new e(this),t(this).data("bs.button",i)),"toggle"===n&&i[n]()})},o(e,null,[{key:"VERSION",get:function(){return"4.1.3"}}]),e}();return t(document).on(d.CLICK_DATA_API,a,function(e){e.preventDefault();var n=e.target;t(n).hasClass(s)||(n=t(n).closest(u)),f._jQueryInterface.call(t(n),"toggle")}).on(d.FOCUS_BLUR_DATA_API,a,function(e){var n=t(e.target).closest(u)[0];t(n).toggleClass(r,/^focus(in)?$/.test(e.type))}),t.fn[e]=f._jQueryInterface,t.fn[e].Constructor=f,t.fn[e].noConflict=function(){return t.fn[e]=n,f._jQueryInterface},f}(e),h=function(t){var e="carousel",n="bs.carousel",i="."+n,s=t.fn[e],l={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},c={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},h="next",u="prev",d="left",f="right",p={SLIDE:"slide"+i,SLID:"slid"+i,KEYDOWN:"keydown"+i,MOUSEENTER:"mouseenter"+i,MOUSELEAVE:"mouseleave"+i,TOUCHEND:"touchend"+i,LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},g="carousel",m="active",v="slide",b="carousel-item-right",y="carousel-item-left",_="carousel-item-next",w="carousel-item-prev",x={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},E=function(){function s(e,n){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(n),this._element=t(e)[0],this._indicatorsElement=this._element.querySelector(x.INDICATORS),this._addEventListeners()}var E=s.prototype;return E.next=function(){this._isSliding||this._slide(h)},E.nextWhenVisible=function(){!document.hidden&&t(this._element).is(":visible")&&"hidden"!==t(this._element).css("visibility")&&this.next()},E.prev=function(){this._isSliding||this._slide(u)},E.pause=function(t){t||(this._isPaused=!0),this._element.querySelector(x.NEXT_PREV)&&(a.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},E.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},E.to=function(e){var n=this;this._activeElement=this._element.querySelector(x.ACTIVE_ITEM);var i=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0))if(this._isSliding)t(this._element).one(p.SLID,function(){return n.to(e)});else{if(i===e)return this.pause(),void this.cycle();var o=e>i?h:u;this._slide(o,this._items[e])}},E.dispose=function(){t(this._element).off(i),t.removeData(this._element,n),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},E._getConfig=function(t){return t=r({},l,t),a.typeCheckConfig(e,t,c),t},E._addEventListeners=function(){var e=this;this._config.keyboard&&t(this._element).on(p.KEYDOWN,function(t){return e._keydown(t)}),"hover"===this._config.pause&&(t(this._element).on(p.MOUSEENTER,function(t){return e.pause(t)}).on(p.MOUSELEAVE,function(t){return e.cycle(t)}),"ontouchstart"in document.documentElement&&t(this._element).on(p.TOUCHEND,function(){e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout(function(t){return e.cycle(t)},500+e._config.interval)}))},E._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},E._getItemIndex=function(t){return this._items=t&&t.parentNode?[].slice.call(t.parentNode.querySelectorAll(x.ITEM)):[],this._items.indexOf(t)},E._getItemByDirection=function(t,e){var n=t===h,i=t===u,o=this._getItemIndex(e),s=this._items.length-1;if((i&&0===o||n&&o===s)&&!this._config.wrap)return e;var r=(o+(t===u?-1:1))%this._items.length;return-1===r?this._items[this._items.length-1]:this._items[r]},E._triggerSlideEvent=function(e,n){var i=this._getItemIndex(e),o=this._getItemIndex(this._element.querySelector(x.ACTIVE_ITEM)),s=t.Event(p.SLIDE,{relatedTarget:e,direction:n,from:o,to:i});return t(this._element).trigger(s),s},E._setActiveIndicatorElement=function(e){if(this._indicatorsElement){var n=[].slice.call(this._indicatorsElement.querySelectorAll(x.ACTIVE));t(n).removeClass(m);var i=this._indicatorsElement.children[this._getItemIndex(e)];i&&t(i).addClass(m)}},E._slide=function(e,n){var i,o,s,r=this,l=this._element.querySelector(x.ACTIVE_ITEM),c=this._getItemIndex(l),u=n||l&&this._getItemByDirection(e,l),g=this._getItemIndex(u),E=Boolean(this._interval);if(e===h?(i=y,o=_,s=d):(i=b,o=w,s=f),u&&t(u).hasClass(m))this._isSliding=!1;else if(!this._triggerSlideEvent(u,s).isDefaultPrevented()&&l&&u){this._isSliding=!0,E&&this.pause(),this._setActiveIndicatorElement(u);var C=t.Event(p.SLID,{relatedTarget:u,direction:s,from:c,to:g});if(t(this._element).hasClass(v)){t(u).addClass(o),a.reflow(u),t(l).addClass(i),t(u).addClass(i);var T=a.getTransitionDurationFromElement(l);t(l).one(a.TRANSITION_END,function(){t(u).removeClass(i+" "+o).addClass(m),t(l).removeClass(m+" "+o+" "+i),r._isSliding=!1,setTimeout(function(){return t(r._element).trigger(C)},0)}).emulateTransitionEnd(T)}else t(l).removeClass(m),t(u).addClass(m),this._isSliding=!1,t(this._element).trigger(C);E&&this.cycle()}},s._jQueryInterface=function(e){return this.each(function(){var i=t(this).data(n),o=r({},l,t(this).data());"object"==typeof e&&(o=r({},o,e));var a="string"==typeof e?e:o.slide;if(i||(i=new s(this,o),t(this).data(n,i)),"number"==typeof e)i.to(e);else if("string"==typeof a){if(void 0===i[a])throw new TypeError('No method named "'+a+'"');i[a]()}else o.interval&&(i.pause(),i.cycle())})},s._dataApiClickHandler=function(e){var i=a.getSelectorFromElement(this);if(i){var o=t(i)[0];if(o&&t(o).hasClass(g)){var l=r({},t(o).data(),t(this).data()),c=this.getAttribute("data-slide-to");c&&(l.interval=!1),s._jQueryInterface.call(t(o),l),c&&t(o).data(n).to(c),e.preventDefault()}}},o(s,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return l}}]),s}();return t(document).on(p.CLICK_DATA_API,x.DATA_SLIDE,E._dataApiClickHandler),t(window).on(p.LOAD_DATA_API,function(){for(var e=[].slice.call(document.querySelectorAll(x.DATA_RIDE)),n=0,i=e.length;n<i;n++){var o=t(e[n]);E._jQueryInterface.call(o,o.data())}}),t.fn[e]=E._jQueryInterface,t.fn[e].Constructor=E,t.fn[e].noConflict=function(){return t.fn[e]=s,E._jQueryInterface},E}(e),u=function(t){var e="collapse",n="bs.collapse",i=t.fn[e],s={toggle:!0,parent:""},l={toggle:"boolean",parent:"(string|element)"},c={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},h="show",u="collapse",d="collapsing",f="collapsed",p="width",g="height",m={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},v=function(){function i(e,n){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(n),this._triggerArray=t.makeArray(document.querySelectorAll('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'));for(var i=[].slice.call(document.querySelectorAll(m.DATA_TOGGLE)),o=0,s=i.length;o<s;o++){var r=i[o],l=a.getSelectorFromElement(r),c=[].slice.call(document.querySelectorAll(l)).filter(function(t){return t===e});null!==l&&c.length>0&&(this._selector=l,this._triggerArray.push(r))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var v=i.prototype;return v.toggle=function(){t(this._element).hasClass(h)?this.hide():this.show()},v.show=function(){var e,o,s=this;if(!this._isTransitioning&&!t(this._element).hasClass(h)&&(this._parent&&0===(e=[].slice.call(this._parent.querySelectorAll(m.ACTIVES)).filter(function(t){return t.getAttribute("data-parent")===s._config.parent})).length&&(e=null),!(e&&(o=t(e).not(this._selector).data(n))&&o._isTransitioning))){var r=t.Event(c.SHOW);if(t(this._element).trigger(r),!r.isDefaultPrevented()){e&&(i._jQueryInterface.call(t(e).not(this._selector),"hide"),o||t(e).data(n,null));var l=this._getDimension();t(this._element).removeClass(u).addClass(d),this._element.style[l]=0,this._triggerArray.length&&t(this._triggerArray).removeClass(f).attr("aria-expanded",!0),this.setTransitioning(!0);var p="scroll"+(l[0].toUpperCase()+l.slice(1)),g=a.getTransitionDurationFromElement(this._element);t(this._element).one(a.TRANSITION_END,function(){t(s._element).removeClass(d).addClass(u).addClass(h),s._element.style[l]="",s.setTransitioning(!1),t(s._element).trigger(c.SHOWN)}).emulateTransitionEnd(g),this._element.style[l]=this._element[p]+"px"}}},v.hide=function(){var e=this;if(!this._isTransitioning&&t(this._element).hasClass(h)){var n=t.Event(c.HIDE);if(t(this._element).trigger(n),!n.isDefaultPrevented()){var i=this._getDimension();this._element.style[i]=this._element.getBoundingClientRect()[i]+"px",a.reflow(this._element),t(this._element).addClass(d).removeClass(u).removeClass(h);var o=this._triggerArray.length;if(o>0)for(var s=0;s<o;s++){var r=this._triggerArray[s],l=a.getSelectorFromElement(r);if(null!==l)t([].slice.call(document.querySelectorAll(l))).hasClass(h)||t(r).addClass(f).attr("aria-expanded",!1)}this.setTransitioning(!0);this._element.style[i]="";var p=a.getTransitionDurationFromElement(this._element);t(this._element).one(a.TRANSITION_END,function(){e.setTransitioning(!1),t(e._element).removeClass(d).addClass(u).trigger(c.HIDDEN)}).emulateTransitionEnd(p)}}},v.setTransitioning=function(t){this._isTransitioning=t},v.dispose=function(){t.removeData(this._element,n),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},v._getConfig=function(t){return(t=r({},s,t)).toggle=Boolean(t.toggle),a.typeCheckConfig(e,t,l),t},v._getDimension=function(){return t(this._element).hasClass(p)?p:g},v._getParent=function(){var e=this,n=null;a.isElement(this._config.parent)?(n=this._config.parent,void 0!==this._config.parent.jquery&&(n=this._config.parent[0])):n=document.querySelector(this._config.parent);var o='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',s=[].slice.call(n.querySelectorAll(o));return t(s).each(function(t,n){e._addAriaAndCollapsedClass(i._getTargetFromElement(n),[n])}),n},v._addAriaAndCollapsedClass=function(e,n){if(e){var i=t(e).hasClass(h);n.length&&t(n).toggleClass(f,!i).attr("aria-expanded",i)}},i._getTargetFromElement=function(t){var e=a.getSelectorFromElement(t);return e?document.querySelector(e):null},i._jQueryInterface=function(e){return this.each(function(){var o=t(this),a=o.data(n),l=r({},s,o.data(),"object"==typeof e&&e?e:{});if(!a&&l.toggle&&/show|hide/.test(e)&&(l.toggle=!1),a||(a=new i(this,l),o.data(n,a)),"string"==typeof e){if(void 0===a[e])throw new TypeError('No method named "'+e+'"');a[e]()}})},o(i,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return s}}]),i}();return t(document).on(c.CLICK_DATA_API,m.DATA_TOGGLE,function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var i=t(this),o=a.getSelectorFromElement(this),s=[].slice.call(document.querySelectorAll(o));t(s).each(function(){var e=t(this),o=e.data(n)?"toggle":i.data();v._jQueryInterface.call(e,o)})}),t.fn[e]=v._jQueryInterface,t.fn[e].Constructor=v,t.fn[e].noConflict=function(){return t.fn[e]=i,v._jQueryInterface},v}(e),d=function(t){var e="dropdown",i="bs.dropdown",s="."+i,l=t.fn[e],c=new RegExp("38|40|27"),h={HIDE:"hide"+s,HIDDEN:"hidden"+s,SHOW:"show"+s,SHOWN:"shown"+s,CLICK:"click"+s,CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},u="disabled",d="show",f="dropup",p="dropright",g="dropleft",m="dropdown-menu-right",v="position-static",b='[data-toggle="dropdown"]',y=".dropdown form",_=".dropdown-menu",w=".navbar-nav",x=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",E="top-start",C="top-end",T="bottom-start",S="bottom-end",I="right-start",A="left-start",D={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},P={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},$=function(){function l(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var y=l.prototype;return y.toggle=function(){if(!this._element.disabled&&!t(this._element).hasClass(u)){var e=l._getParentFromElement(this._element),i=t(this._menu).hasClass(d);if(l._clearMenus(),!i){var o={relatedTarget:this._element},s=t.Event(h.SHOW,o);if(t(e).trigger(s),!s.isDefaultPrevented()){if(!this._inNavbar){if(void 0===n)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var r=this._element;"parent"===this._config.reference?r=e:a.isElement(this._config.reference)&&(r=this._config.reference,void 0!==this._config.reference.jquery&&(r=this._config.reference[0])),"scrollParent"!==this._config.boundary&&t(e).addClass(v),this._popper=new n(r,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===t(e).closest(w).length&&t(document.body).children().on("mouseover",null,t.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),t(this._menu).toggleClass(d),t(e).toggleClass(d).trigger(t.Event(h.SHOWN,o))}}}},y.dispose=function(){t.removeData(this._element,i),t(this._element).off(s),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},y.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},y._addEventListeners=function(){var e=this;t(this._element).on(h.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle()})},y._getConfig=function(n){return n=r({},this.constructor.Default,t(this._element).data(),n),a.typeCheckConfig(e,n,this.constructor.DefaultType),n},y._getMenuElement=function(){if(!this._menu){var t=l._getParentFromElement(this._element);t&&(this._menu=t.querySelector(_))}return this._menu},y._getPlacement=function(){var e=t(this._element.parentNode),n=T;return e.hasClass(f)?(n=E,t(this._menu).hasClass(m)&&(n=C)):e.hasClass(p)?n=I:e.hasClass(g)?n=A:t(this._menu).hasClass(m)&&(n=S),n},y._detectNavbar=function(){return t(this._element).closest(".navbar").length>0},y._getPopperConfig=function(){var t=this,e={};"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=r({},e.offsets,t._config.offset(e.offsets)||{}),e}:e.offset=this._config.offset;var n={placement:this._getPlacement(),modifiers:{offset:e,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(n.modifiers.applyStyle={enabled:!1}),n},l._jQueryInterface=function(e){return this.each(function(){var n=t(this).data(i);if(n||(n=new l(this,"object"==typeof e?e:null),t(this).data(i,n)),"string"==typeof e){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e]()}})},l._clearMenus=function(e){if(!e||3!==e.which&&("keyup"!==e.type||9===e.which))for(var n=[].slice.call(document.querySelectorAll(b)),o=0,s=n.length;o<s;o++){var r=l._getParentFromElement(n[o]),a=t(n[o]).data(i),c={relatedTarget:n[o]};if(e&&"click"===e.type&&(c.clickEvent=e),a){var u=a._menu;if(t(r).hasClass(d)&&!(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"keyup"===e.type&&9===e.which)&&t.contains(r,e.target))){var f=t.Event(h.HIDE,c);t(r).trigger(f),f.isDefaultPrevented()||("ontouchstart"in document.documentElement&&t(document.body).children().off("mouseover",null,t.noop),n[o].setAttribute("aria-expanded","false"),t(u).removeClass(d),t(r).removeClass(d).trigger(t.Event(h.HIDDEN,c)))}}}},l._getParentFromElement=function(t){var e,n=a.getSelectorFromElement(t);return n&&(e=document.querySelector(n)),e||t.parentNode},l._dataApiKeydownHandler=function(e){if((/input|textarea/i.test(e.target.tagName)?!(32===e.which||27!==e.which&&(40!==e.which&&38!==e.which||t(e.target).closest(_).length)):c.test(e.which))&&(e.preventDefault(),e.stopPropagation(),!this.disabled&&!t(this).hasClass(u))){var n=l._getParentFromElement(this),i=t(n).hasClass(d);if((i||27===e.which&&32===e.which)&&(!i||27!==e.which&&32!==e.which)){var o=[].slice.call(n.querySelectorAll(x));if(0!==o.length){var s=o.indexOf(e.target);38===e.which&&s>0&&s--,40===e.which&&s<o.length-1&&s++,s<0&&(s=0),o[s].focus()}}else{if(27===e.which){var r=n.querySelector(b);t(r).trigger("focus")}t(this).trigger("click")}}},o(l,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return D}},{key:"DefaultType",get:function(){return P}}]),l}();return t(document).on(h.KEYDOWN_DATA_API,b,$._dataApiKeydownHandler).on(h.KEYDOWN_DATA_API,_,$._dataApiKeydownHandler).on(h.CLICK_DATA_API+" "+h.KEYUP_DATA_API,$._clearMenus).on(h.CLICK_DATA_API,b,function(e){e.preventDefault(),e.stopPropagation(),$._jQueryInterface.call(t(this),"toggle")}).on(h.CLICK_DATA_API,y,function(t){t.stopPropagation()}),t.fn[e]=$._jQueryInterface,t.fn[e].Constructor=$,t.fn[e].noConflict=function(){return t.fn[e]=l,$._jQueryInterface},$}(e),f=function(t){var e="modal",n=".bs.modal",i=t.fn.modal,s={backdrop:!0,keyboard:!0,focus:!0,show:!0},l={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},c={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},h="modal-scrollbar-measure",u="modal-backdrop",d="modal-open",f="fade",p="show",g={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top"},m=function(){function i(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=t.querySelector(g.DIALOG),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._scrollbarWidth=0}var m=i.prototype;return m.toggle=function(t){return this._isShown?this.hide():this.show(t)},m.show=function(e){var n=this;if(!this._isTransitioning&&!this._isShown){t(this._element).hasClass(f)&&(this._isTransitioning=!0);var i=t.Event(c.SHOW,{relatedTarget:e});t(this._element).trigger(i),this._isShown||i.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),t(document.body).addClass(d),this._setEscapeEvent(),this._setResizeEvent(),t(this._element).on(c.CLICK_DISMISS,g.DATA_DISMISS,function(t){return n.hide(t)}),t(this._dialog).on(c.MOUSEDOWN_DISMISS,function(){t(n._element).one(c.MOUSEUP_DISMISS,function(e){t(e.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return n._showElement(e)}))}},m.hide=function(e){var n=this;if(e&&e.preventDefault(),!this._isTransitioning&&this._isShown){var i=t.Event(c.HIDE);if(t(this._element).trigger(i),this._isShown&&!i.isDefaultPrevented()){this._isShown=!1;var o=t(this._element).hasClass(f);if(o&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),t(document).off(c.FOCUSIN),t(this._element).removeClass(p),t(this._element).off(c.CLICK_DISMISS),t(this._dialog).off(c.MOUSEDOWN_DISMISS),o){var s=a.getTransitionDurationFromElement(this._element);t(this._element).one(a.TRANSITION_END,function(t){return n._hideModal(t)}).emulateTransitionEnd(s)}else this._hideModal()}}},m.dispose=function(){t.removeData(this._element,"bs.modal"),t(window,document,this._element,this._backdrop).off(n),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},m.handleUpdate=function(){this._adjustDialog()},m._getConfig=function(t){return t=r({},s,t),a.typeCheckConfig(e,t,l),t},m._showElement=function(e){var n=this,i=t(this._element).hasClass(f);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,i&&a.reflow(this._element),t(this._element).addClass(p),this._config.focus&&this._enforceFocus();var o=t.Event(c.SHOWN,{relatedTarget:e}),s=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,t(n._element).trigger(o)};if(i){var r=a.getTransitionDurationFromElement(this._element);t(this._dialog).one(a.TRANSITION_END,s).emulateTransitionEnd(r)}else s()},m._enforceFocus=function(){var e=this;t(document).off(c.FOCUSIN).on(c.FOCUSIN,function(n){document!==n.target&&e._element!==n.target&&0===t(e._element).has(n.target).length&&e._element.focus()})},m._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?t(this._element).on(c.KEYDOWN_DISMISS,function(t){27===t.which&&(t.preventDefault(),e.hide())}):this._isShown||t(this._element).off(c.KEYDOWN_DISMISS)},m._setResizeEvent=function(){var e=this;this._isShown?t(window).on(c.RESIZE,function(t){return e.handleUpdate(t)}):t(window).off(c.RESIZE)},m._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){t(document.body).removeClass(d),e._resetAdjustments(),e._resetScrollbar(),t(e._element).trigger(c.HIDDEN)})},m._removeBackdrop=function(){this._backdrop&&(t(this._backdrop).remove(),this._backdrop=null)},m._showBackdrop=function(e){var n=this,i=t(this._element).hasClass(f)?f:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=u,i&&this._backdrop.classList.add(i),t(this._backdrop).appendTo(document.body),t(this._element).on(c.CLICK_DISMISS,function(t){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())}),i&&a.reflow(this._backdrop),t(this._backdrop).addClass(p),!e)return;if(!i)return void e();var o=a.getTransitionDurationFromElement(this._backdrop);t(this._backdrop).one(a.TRANSITION_END,e).emulateTransitionEnd(o)}else if(!this._isShown&&this._backdrop){t(this._backdrop).removeClass(p);var s=function(){n._removeBackdrop(),e&&e()};if(t(this._element).hasClass(f)){var r=a.getTransitionDurationFromElement(this._backdrop);t(this._backdrop).one(a.TRANSITION_END,s).emulateTransitionEnd(r)}else s()}else e&&e()},m._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},m._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},m._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},m._setScrollbar=function(){var e=this;if(this._isBodyOverflowing){var n=[].slice.call(document.querySelectorAll(g.FIXED_CONTENT)),i=[].slice.call(document.querySelectorAll(g.STICKY_CONTENT));t(n).each(function(n,i){var o=i.style.paddingRight,s=t(i).css("padding-right");t(i).data("padding-right",o).css("padding-right",parseFloat(s)+e._scrollbarWidth+"px")}),t(i).each(function(n,i){var o=i.style.marginRight,s=t(i).css("margin-right");t(i).data("margin-right",o).css("margin-right",parseFloat(s)-e._scrollbarWidth+"px")});var o=document.body.style.paddingRight,s=t(document.body).css("padding-right");t(document.body).data("padding-right",o).css("padding-right",parseFloat(s)+this._scrollbarWidth+"px")}},m._resetScrollbar=function(){var e=[].slice.call(document.querySelectorAll(g.FIXED_CONTENT));t(e).each(function(e,n){var i=t(n).data("padding-right");t(n).removeData("padding-right"),n.style.paddingRight=i||""});var n=[].slice.call(document.querySelectorAll(""+g.STICKY_CONTENT));t(n).each(function(e,n){var i=t(n).data("margin-right");void 0!==i&&t(n).css("margin-right",i).removeData("margin-right")});var i=t(document.body).data("padding-right");t(document.body).removeData("padding-right"),document.body.style.paddingRight=i||""},m._getScrollbarWidth=function(){var t=document.createElement("div");t.className=h,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},i._jQueryInterface=function(e,n){return this.each(function(){var o=t(this).data("bs.modal"),a=r({},s,t(this).data(),"object"==typeof e&&e?e:{});if(o||(o=new i(this,a),t(this).data("bs.modal",o)),"string"==typeof e){if(void 0===o[e])throw new TypeError('No method named "'+e+'"');o[e](n)}else a.show&&o.show(n)})},o(i,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return s}}]),i}();return t(document).on(c.CLICK_DATA_API,g.DATA_TOGGLE,function(e){var n,i=this,o=a.getSelectorFromElement(this);o&&(n=document.querySelector(o));var s=t(n).data("bs.modal")?"toggle":r({},t(n).data(),t(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault();var l=t(n).one(c.SHOW,function(e){e.isDefaultPrevented()||l.one(c.HIDDEN,function(){t(i).is(":visible")&&i.focus()})});m._jQueryInterface.call(t(n),s,this)}),t.fn.modal=m._jQueryInterface,t.fn.modal.Constructor=m,t.fn.modal.noConflict=function(){return t.fn.modal=i,m._jQueryInterface},m}(e),p=function(t){var e="tooltip",i=".bs.tooltip",s=t.fn[e],l=new RegExp("(^|\\s)bs-tooltip\\S+","g"),c={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"},h={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},u={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},d="show",f="out",p={HIDE:"hide"+i,HIDDEN:"hidden"+i,SHOW:"show"+i,SHOWN:"shown"+i,INSERTED:"inserted"+i,CLICK:"click"+i,FOCUSIN:"focusin"+i,FOCUSOUT:"focusout"+i,MOUSEENTER:"mouseenter"+i,MOUSELEAVE:"mouseleave"+i},g="fade",m="show",v=".tooltip-inner",b=".arrow",y="hover",_="focus",w="click",x="manual",E=function(){function s(t,e){if(void 0===n)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var E=s.prototype;return E.enable=function(){this._isEnabled=!0},E.disable=function(){this._isEnabled=!1},E.toggleEnabled=function(){this._isEnabled=!this._isEnabled},E.toggle=function(e){if(this._isEnabled)if(e){var n=this.constructor.DATA_KEY,i=t(e.currentTarget).data(n);i||(i=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(n,i)),i._activeTrigger.click=!i._activeTrigger.click,i._isWithActiveTrigger()?i._enter(null,i):i._leave(null,i)}else{if(t(this.getTipElement()).hasClass(m))return void this._leave(null,this);this._enter(null,this)}},E.dispose=function(){clearTimeout(this._timeout),t.removeData(this.element,this.constructor.DATA_KEY),t(this.element).off(this.constructor.EVENT_KEY),t(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&t(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},E.show=function(){var e=this;if("none"===t(this.element).css("display"))throw new Error("Please use show on visible elements");var i=t.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){t(this.element).trigger(i);var o=t.contains(this.element.ownerDocument.documentElement,this.element);if(i.isDefaultPrevented()||!o)return;var s=this.getTipElement(),r=a.getUID(this.constructor.NAME);s.setAttribute("id",r),this.element.setAttribute("aria-describedby",r),this.setContent(),this.config.animation&&t(s).addClass(g);var l="function"==typeof this.config.placement?this.config.placement.call(this,s,this.element):this.config.placement,c=this._getAttachment(l);this.addAttachmentClass(c);var h=!1===this.config.container?document.body:t(document).find(this.config.container);t(s).data(this.constructor.DATA_KEY,this),t.contains(this.element.ownerDocument.documentElement,this.tip)||t(s).appendTo(h),t(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new n(this.element,s,{placement:c,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:b},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){e._handlePopperPlacementChange(t)}}),t(s).addClass(m),"ontouchstart"in document.documentElement&&t(document.body).children().on("mouseover",null,t.noop);var u=function(){e.config.animation&&e._fixTransition();var n=e._hoverState;e._hoverState=null,t(e.element).trigger(e.constructor.Event.SHOWN),n===f&&e._leave(null,e)};if(t(this.tip).hasClass(g)){var d=a.getTransitionDurationFromElement(this.tip);t(this.tip).one(a.TRANSITION_END,u).emulateTransitionEnd(d)}else u()}},E.hide=function(e){var n=this,i=this.getTipElement(),o=t.Event(this.constructor.Event.HIDE),s=function(){n._hoverState!==d&&i.parentNode&&i.parentNode.removeChild(i),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),t(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),e&&e()};if(t(this.element).trigger(o),!o.isDefaultPrevented()){if(t(i).removeClass(m),"ontouchstart"in document.documentElement&&t(document.body).children().off("mouseover",null,t.noop),this._activeTrigger[w]=!1,this._activeTrigger[_]=!1,this._activeTrigger[y]=!1,t(this.tip).hasClass(g)){var r=a.getTransitionDurationFromElement(i);t(i).one(a.TRANSITION_END,s).emulateTransitionEnd(r)}else s();this._hoverState=""}},E.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},E.isWithContent=function(){return Boolean(this.getTitle())},E.addAttachmentClass=function(e){t(this.getTipElement()).addClass("bs-tooltip-"+e)},E.getTipElement=function(){return this.tip=this.tip||t(this.config.template)[0],this.tip},E.setContent=function(){var e=this.getTipElement();this.setElementContent(t(e.querySelectorAll(v)),this.getTitle()),t(e).removeClass(g+" "+m)},E.setElementContent=function(e,n){var i=this.config.html;"object"==typeof n&&(n.nodeType||n.jquery)?i?t(n).parent().is(e)||e.empty().append(n):e.text(t(n).text()):e[i?"html":"text"](n)},E.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},E._getAttachment=function(t){return h[t.toUpperCase()]},E._setListeners=function(){var e=this;this.config.trigger.split(" ").forEach(function(n){if("click"===n)t(e.element).on(e.constructor.Event.CLICK,e.config.selector,function(t){return e.toggle(t)});else if(n!==x){var i=n===y?e.constructor.Event.MOUSEENTER:e.constructor.Event.FOCUSIN,o=n===y?e.constructor.Event.MOUSELEAVE:e.constructor.Event.FOCUSOUT;t(e.element).on(i,e.config.selector,function(t){return e._enter(t)}).on(o,e.config.selector,function(t){return e._leave(t)})}t(e.element).closest(".modal").on("hide.bs.modal",function(){return e.hide()})}),this.config.selector?this.config=r({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},E._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},E._enter=function(e,n){var i=this.constructor.DATA_KEY;(n=n||t(e.currentTarget).data(i))||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(i,n)),e&&(n._activeTrigger["focusin"===e.type?_:y]=!0),t(n.getTipElement()).hasClass(m)||n._hoverState===d?n._hoverState=d:(clearTimeout(n._timeout),n._hoverState=d,n.config.delay&&n.config.delay.show?n._timeout=setTimeout(function(){n._hoverState===d&&n.show()},n.config.delay.show):n.show())},E._leave=function(e,n){var i=this.constructor.DATA_KEY;(n=n||t(e.currentTarget).data(i))||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(i,n)),e&&(n._activeTrigger["focusout"===e.type?_:y]=!1),n._isWithActiveTrigger()||(clearTimeout(n._timeout),n._hoverState=f,n.config.delay&&n.config.delay.hide?n._timeout=setTimeout(function(){n._hoverState===f&&n.hide()},n.config.delay.hide):n.hide())},E._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},E._getConfig=function(n){return"number"==typeof(n=r({},this.constructor.Default,t(this.element).data(),"object"==typeof n&&n?n:{})).delay&&(n.delay={show:n.delay,hide:n.delay}),"number"==typeof n.title&&(n.title=n.title.toString()),"number"==typeof n.content&&(n.content=n.content.toString()),a.typeCheckConfig(e,n,this.constructor.DefaultType),n},E._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},E._cleanTipClass=function(){var e=t(this.getTipElement()),n=e.attr("class").match(l);null!==n&&n.length&&e.removeClass(n.join(""))},E._handlePopperPlacementChange=function(t){var e=t.instance;this.tip=e.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},E._fixTransition=function(){var e=this.getTipElement(),n=this.config.animation;null===e.getAttribute("x-placement")&&(t(e).removeClass(g),this.config.animation=!1,this.hide(),this.show(),this.config.animation=n)},s._jQueryInterface=function(e){return this.each(function(){var n=t(this).data("bs.tooltip"),i="object"==typeof e&&e;if((n||!/dispose|hide/.test(e))&&(n||(n=new s(this,i),t(this).data("bs.tooltip",n)),"string"==typeof e)){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e]()}})},o(s,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return u}},{key:"NAME",get:function(){return e}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return p}},{key:"EVENT_KEY",get:function(){return i}},{key:"DefaultType",get:function(){return c}}]),s}();return t.fn[e]=E._jQueryInterface,t.fn[e].Constructor=E,t.fn[e].noConflict=function(){return t.fn[e]=s,E._jQueryInterface},E}(e),g=function(t){var e="popover",n=".bs.popover",i=t.fn[e],s=new RegExp("(^|\\s)bs-popover\\S+","g"),a=r({},p.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),l=r({},p.DefaultType,{content:"(string|element|function)"}),c="fade",h="show",u=".popover-header",d=".popover-body",f={HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n,INSERTED:"inserted"+n,CLICK:"click"+n,FOCUSIN:"focusin"+n,FOCUSOUT:"focusout"+n,MOUSEENTER:"mouseenter"+n,MOUSELEAVE:"mouseleave"+n},g=function(i){var r,p;function g(){return i.apply(this,arguments)||this}p=i,(r=g).prototype=Object.create(p.prototype),r.prototype.constructor=r,r.__proto__=p;var m=g.prototype;return m.isWithContent=function(){return this.getTitle()||this._getContent()},m.addAttachmentClass=function(e){t(this.getTipElement()).addClass("bs-popover-"+e)},m.getTipElement=function(){return this.tip=this.tip||t(this.config.template)[0],this.tip},m.setContent=function(){var e=t(this.getTipElement());this.setElementContent(e.find(u),this.getTitle());var n=this._getContent();"function"==typeof n&&(n=n.call(this.element)),this.setElementContent(e.find(d),n),e.removeClass(c+" "+h)},m._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},m._cleanTipClass=function(){var e=t(this.getTipElement()),n=e.attr("class").match(s);null!==n&&n.length>0&&e.removeClass(n.join(""))},g._jQueryInterface=function(e){return this.each(function(){var n=t(this).data("bs.popover"),i="object"==typeof e?e:null;if((n||!/destroy|hide/.test(e))&&(n||(n=new g(this,i),t(this).data("bs.popover",n)),"string"==typeof e)){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e]()}})},o(g,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return a}},{key:"NAME",get:function(){return e}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return f}},{key:"EVENT_KEY",get:function(){return n}},{key:"DefaultType",get:function(){return l}}]),g}(p);return t.fn[e]=g._jQueryInterface,t.fn[e].Constructor=g,t.fn[e].noConflict=function(){return t.fn[e]=i,g._jQueryInterface},g}(e),m=function(t){var e="scrollspy",n=t.fn[e],i={offset:10,method:"auto",target:""},s={offset:"number",method:"string",target:"(string|element)"},l={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},c="dropdown-item",h="active",u={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},d="offset",f="position",p=function(){function n(e,n){var i=this;this._element=e,this._scrollElement="BODY"===e.tagName?window:e,this._config=this._getConfig(n),this._selector=this._config.target+" "+u.NAV_LINKS+","+this._config.target+" "+u.LIST_ITEMS+","+this._config.target+" "+u.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,t(this._scrollElement).on(l.SCROLL,function(t){return i._process(t)}),this.refresh(),this._process()}var p=n.prototype;return p.refresh=function(){var e=this,n=this._scrollElement===this._scrollElement.window?d:f,i="auto"===this._config.method?n:this._config.method,o=i===f?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map(function(e){var n,s=a.getSelectorFromElement(e);if(s&&(n=document.querySelector(s)),n){var r=n.getBoundingClientRect();if(r.width||r.height)return[t(n)[i]().top+o,s]}return null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})},p.dispose=function(){t.removeData(this._element,"bs.scrollspy"),t(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},p._getConfig=function(n){if("string"!=typeof(n=r({},i,"object"==typeof n&&n?n:{})).target){var o=t(n.target).attr("id");o||(o=a.getUID(e),t(n.target).attr("id",o)),n.target="#"+o}return a.typeCheckConfig(e,n,s),n},p._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},p._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},p._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},p._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var o=this._offsets.length;o--;){this._activeTarget!==this._targets[o]&&t>=this._offsets[o]&&(void 0===this._offsets[o+1]||t<this._offsets[o+1])&&this._activate(this._targets[o])}}},p._activate=function(e){this._activeTarget=e,this._clear();var n=this._selector.split(",");n=n.map(function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'});var i=t([].slice.call(document.querySelectorAll(n.join(","))));i.hasClass(c)?(i.closest(u.DROPDOWN).find(u.DROPDOWN_TOGGLE).addClass(h),i.addClass(h)):(i.addClass(h),i.parents(u.NAV_LIST_GROUP).prev(u.NAV_LINKS+", "+u.LIST_ITEMS).addClass(h),i.parents(u.NAV_LIST_GROUP).prev(u.NAV_ITEMS).children(u.NAV_LINKS).addClass(h)),t(this._scrollElement).trigger(l.ACTIVATE,{relatedTarget:e})},p._clear=function(){var e=[].slice.call(document.querySelectorAll(this._selector));t(e).filter(u.ACTIVE).removeClass(h)},n._jQueryInterface=function(e){return this.each(function(){var i=t(this).data("bs.scrollspy");if(i||(i=new n(this,"object"==typeof e&&e),t(this).data("bs.scrollspy",i)),"string"==typeof e){if(void 0===i[e])throw new TypeError('No method named "'+e+'"');i[e]()}})},o(n,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return i}}]),n}();return t(window).on(l.LOAD_DATA_API,function(){for(var e=[].slice.call(document.querySelectorAll(u.DATA_SPY)),n=e.length;n--;){var i=t(e[n]);p._jQueryInterface.call(i,i.data())}}),t.fn[e]=p._jQueryInterface,t.fn[e].Constructor=p,t.fn[e].noConflict=function(){return t.fn[e]=n,p._jQueryInterface},p}(e),v=function(t){var e=t.fn.tab,n={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},i="dropdown-menu",s="active",r="disabled",l="fade",c="show",h=".dropdown",u=".nav, .list-group",d=".active",f="> li > .active",p='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',g=".dropdown-toggle",m="> .dropdown-menu .active",v=function(){function e(t){this._element=t}var p=e.prototype;return p.show=function(){var e=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&t(this._element).hasClass(s)||t(this._element).hasClass(r))){var i,o,l=t(this._element).closest(u)[0],c=a.getSelectorFromElement(this._element);if(l){var h="UL"===l.nodeName?f:d;o=(o=t.makeArray(t(l).find(h)))[o.length-1]}var p=t.Event(n.HIDE,{relatedTarget:this._element}),g=t.Event(n.SHOW,{relatedTarget:o});if(o&&t(o).trigger(p),t(this._element).trigger(g),!g.isDefaultPrevented()&&!p.isDefaultPrevented()){c&&(i=document.querySelector(c)),this._activate(this._element,l);var m=function(){var i=t.Event(n.HIDDEN,{relatedTarget:e._element}),s=t.Event(n.SHOWN,{relatedTarget:o});t(o).trigger(i),t(e._element).trigger(s)};i?this._activate(i,i.parentNode,m):m()}}},p.dispose=function(){t.removeData(this._element,"bs.tab"),this._element=null},p._activate=function(e,n,i){var o=this,s=("UL"===n.nodeName?t(n).find(f):t(n).children(d))[0],r=i&&s&&t(s).hasClass(l),c=function(){return o._transitionComplete(e,s,i)};if(s&&r){var h=a.getTransitionDurationFromElement(s);t(s).one(a.TRANSITION_END,c).emulateTransitionEnd(h)}else c()},p._transitionComplete=function(e,n,o){if(n){t(n).removeClass(c+" "+s);var r=t(n.parentNode).find(m)[0];r&&t(r).removeClass(s),"tab"===n.getAttribute("role")&&n.setAttribute("aria-selected",!1)}if(t(e).addClass(s),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),a.reflow(e),t(e).addClass(c),e.parentNode&&t(e.parentNode).hasClass(i)){var l=t(e).closest(h)[0];if(l){var u=[].slice.call(l.querySelectorAll(g));t(u).addClass(s)}e.setAttribute("aria-expanded",!0)}o&&o()},e._jQueryInterface=function(n){return this.each(function(){var i=t(this),o=i.data("bs.tab");if(o||(o=new e(this),i.data("bs.tab",o)),"string"==typeof n){if(void 0===o[n])throw new TypeError('No method named "'+n+'"');o[n]()}})},o(e,null,[{key:"VERSION",get:function(){return"4.1.3"}}]),e}();return t(document).on(n.CLICK_DATA_API,p,function(e){e.preventDefault(),v._jQueryInterface.call(t(this),"show")}),t.fn.tab=v._jQueryInterface,t.fn.tab.Constructor=v,t.fn.tab.noConflict=function(){return t.fn.tab=e,v._jQueryInterface},v}(e);!function(t){if(void 0===t)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1===e[0]&&9===e[1]&&e[2]<1||e[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(e),t.Util=a,t.Alert=l,t.Button=c,t.Carousel=h,t.Collapse=u,t.Dropdown=d,t.Modal=f,t.Popover=g,t.Scrollspy=m,t.Tab=v,t.Tooltip=p,Object.defineProperty(t,"__esModule",{value:!0})});var cookie=function(t,e,n){if(arguments.length>1&&"[object Object]"!==String(e)){if(n=jQuery.extend({},n),null==e&&(n.expires=-1),"number"==typeof n.expires){var i=n.expires,o=n.expires=new Date;o.setDate(o.getDate()+i)}return e=String(e),document.cookie=[encodeURIComponent(t),"=",n.raw?e:encodeURIComponent(e),n.expires?"; expires="+n.expires.toUTCString():"","; path=/",n.secure?"; secure":""].join("")}var s,r=(n=e||{}).raw?function(t){return t}:decodeURIComponent;return(s=new RegExp("(?:^|; )"+encodeURIComponent(t)+"=([^;]*)").exec(document.cookie))?r(s[1]):null};!function(t,e,n,i){"use strict";if(t.console=t.console||{info:function(t){}},n)if(n.fn.fancybox)console.info("fancyBox already initialized");else{var o,s,r={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:n.noop,beforeLoad:n.noop,afterLoad:n.noop,beforeShow:n.noop,afterShow:n.noop,beforeClose:n.noop,afterClose:n.noop,onActivate:n.noop,onDeactivate:n.noop,clickContent:function(t,e){return"image"===t.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(t,e){return"image"===t.type&&"toggleControls"},clickSlide:function(t,e){return"image"===t.type?"toggleControls":"close"},dblclickContent:function(t,e){return"image"===t.type&&"zoom"},dblclickSlide:function(t,e){return"image"===t.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schliessen",NEXT:"Weiter",PREV:"Zurück",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es später nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Maßstab"}}},a=n(t),l=n(e),c=0,h=t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||function(e){return t.setTimeout(e,1e3/60)},u=t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.mozCancelAnimationFrame||t.oCancelAnimationFrame||function(e){t.clearTimeout(e)},d=function(){var t,n=e.createElement("fakeelement"),i={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(t in i)if(void 0!==n.style[t])return i[t];return"transitionend"}(),f=function(t){return t&&t.length&&t[0].offsetHeight},p=function(t,e){var i=n.extend(!0,{},t,e);return n.each(e,function(t,e){n.isArray(e)&&(i[t]=e)}),i},g=function(t,e,i){this.opts=p({index:i},n.fancybox.defaults),n.isPlainObject(e)&&(this.opts=p(this.opts,e)),n.fancybox.isMobile&&(this.opts=p(this.opts,this.opts.mobile)),this.id=this.opts.id||++c,this.currIndex=parseInt(this.opts.index,10)||0,this.prevIndex=null,this.prevPos=null,this.currPos=0,this.firstRun=!0,this.group=[],this.slides={},this.addContent(t),this.group.length&&this.init()};n.extend(g.prototype,{init:function(){var i,o,s=this,r=s.group[s.currIndex].opts;r.closeExisting&&n.fancybox.close(!0),n("body").addClass("fancybox-active"),!n.fancybox.getInstance()&&!1!==r.hideScrollbar&&!n.fancybox.isMobile&&e.body.scrollHeight>t.innerHeight&&(n("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(t.innerWidth-e.documentElement.clientWidth)+"px;}</style>"),n("body").addClass("compensate-for-scrollbar")),o="",n.each(r.buttons,function(t,e){o+=r.btnTpl[e]||""}),i=n(s.translate(s,r.baseTpl.replace("{{buttons}}",o).replace("{{arrows}}",r.btnTpl.arrowLeft+r.btnTpl.arrowRight))).attr("id","fancybox-container-"+s.id).addClass(r.baseClass).data("FancyBox",s).appendTo(r.parentEl),s.$refs={container:i},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(t){s.$refs[t]=i.find(".fancybox-"+t)}),s.trigger("onInit"),s.activate(),s.jumpTo(s.currIndex)},translate:function(t,e){var n=t.opts.i18n[t.opts.lang]||t.opts.i18n.en;return e.replace(/\{\{(\w+)\}\}/g,function(t,e){var i=n[e];return void 0===i?t:i})},addContent:function(t){var e,i=this,o=n.makeArray(t);n.each(o,function(t,e){var o,s,r,a,l,c={},h={};n.isPlainObject(e)?(c=e,h=e.opts||e):"object"===n.type(e)&&n(e).length?(h=(o=n(e)).data()||{},(h=n.extend(!0,{},h,h.options)).$orig=o,c.src=i.opts.src||h.src||o.attr("href"),c.type||c.src||(c.type="inline",c.src=e)):c={type:"html",src:e+""},c.opts=n.extend(!0,{},i.opts,h),n.isArray(h.buttons)&&(c.opts.buttons=h.buttons),n.fancybox.isMobile&&c.opts.mobile&&(c.opts=p(c.opts,c.opts.mobile)),s=c.type||c.opts.type,a=c.src||"",!s&&a&&((r=a.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(s="video",c.opts.video.format||(c.opts.video.format="video/"+("ogv"===r[1]?"ogg":r[1]))):a.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?s="image":a.match(/\.(pdf)((\?|#).*)?$/i)?(s="iframe",c=n.extend(!0,c,{contentType:"pdf",opts:{iframe:{preload:!1}}})):"#"===a.charAt(0)&&(s="inline")),s?c.type=s:i.trigger("objectNeedsType",c),c.contentType||(c.contentType=n.inArray(c.type,["html","inline","ajax"])>-1?"html":c.type),c.index=i.group.length,"auto"==c.opts.smallBtn&&(c.opts.smallBtn=n.inArray(c.type,["html","inline","ajax"])>-1),"auto"===c.opts.toolbar&&(c.opts.toolbar=!c.opts.smallBtn),c.$thumb=c.opts.$thumb||null,c.opts.$trigger&&c.index===i.opts.index&&(c.$thumb=c.opts.$trigger.find("img:first"),c.$thumb.length&&(c.opts.$orig=c.opts.$trigger)),c.$thumb&&c.$thumb.length||!c.opts.$orig||(c.$thumb=c.opts.$orig.find("img:first")),c.$thumb&&!c.$thumb.length&&(c.$thumb=null),c.thumb=c.opts.thumb||(c.$thumb?c.$thumb[0].src:null),"function"===n.type(c.opts.caption)&&(c.opts.caption=c.opts.caption.apply(e,[i,c])),"function"===n.type(i.opts.caption)&&(c.opts.caption=i.opts.caption.apply(e,[i,c])),c.opts.caption instanceof n||(c.opts.caption=void 0===c.opts.caption?"":c.opts.caption+""),"ajax"===c.type&&(l=a.split(/\s+/,2)).length>1&&(c.src=l.shift(),c.opts.filter=l.shift()),c.opts.modal&&(c.opts=n.extend(!0,c.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),i.group.push(c)}),Object.keys(i.slides).length&&(i.updateControls(),(e=i.Thumbs)&&e.isActive&&(e.create(),e.focus()))},addEvents:function(){var e=this;e.removeEvents(),e.$refs.container.on("click.fb-close","[data-fancybox-close]",function(t){t.stopPropagation(),t.preventDefault(),e.close(t)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(t){t.stopPropagation(),t.preventDefault(),e.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(t){t.stopPropagation(),t.preventDefault(),e.next()}).on("click.fb","[data-fancybox-zoom]",function(t){e[e.isScaledDown()?"scaleToActual":"scaleToFit"]()}),a.on("orientationchange.fb resize.fb",function(t){t&&t.originalEvent&&"resize"===t.originalEvent.type?(e.requestId&&u(e.requestId),e.requestId=h(function(){e.update(t)})):(e.current&&"iframe"===e.current.type&&e.$refs.stage.hide(),setTimeout(function(){e.$refs.stage.show(),e.update(t)},n.fancybox.isMobile?600:250))}),l.on("keydown.fb",function(t){var i=(n.fancybox?n.fancybox.getInstance():null).current,o=t.keyCode||t.which;if(9!=o){if(!(!i.opts.keyboard||t.ctrlKey||t.altKey||t.shiftKey||n(t.target).is("input")||n(t.target).is("textarea")))return 8===o||27===o?(t.preventDefault(),void e.close(t)):37===o||38===o?(t.preventDefault(),void e.previous()):39===o||40===o?(t.preventDefault(),void e.next()):void e.trigger("afterKeydown",t,o)}else i.opts.trapFocus&&e.focus(t)}),e.group[e.currIndex].opts.idleTime&&(e.idleSecondsCounter=0,l.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(t){e.idleSecondsCounter=0,e.isIdle&&e.showControls(),e.isIdle=!1}),e.idleInterval=t.setInterval(function(){e.idleSecondsCounter++,e.idleSecondsCounter>=e.group[e.currIndex].opts.idleTime&&!e.isDragging&&(e.isIdle=!0,e.idleSecondsCounter=0,e.hideControls())},1e3))},removeEvents:function(){a.off("orientationchange.fb resize.fb"),l.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(t.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(t){return this.jumpTo(this.currPos-1,t)},next:function(t){return this.jumpTo(this.currPos+1,t)},jumpTo:function(t,e){var i,o,s,r,a,l,c,h,u,d=this,p=d.group.length;if(!(d.isDragging||d.isClosing||d.isAnimating&&d.firstRun)){if(t=parseInt(t,10),!(s=d.current?d.current.opts.loop:d.opts.loop)&&(t<0||t>=p))return!1;if(i=d.firstRun=!Object.keys(d.slides).length,a=d.current,d.prevIndex=d.currIndex,d.prevPos=d.currPos,r=d.createSlide(t),p>1&&((s||r.index<p-1)&&d.createSlide(t+1),(s||r.index>0)&&d.createSlide(t-1)),d.current=r,d.currIndex=r.index,d.currPos=r.pos,d.trigger("beforeShow",i),d.updateControls(),r.forcedDuration=void 0,n.isNumeric(e)?r.forcedDuration=e:e=r.opts[i?"animationDuration":"transitionDuration"],e=parseInt(e,10),o=d.isMoved(r),r.$slide.addClass("fancybox-slide--current"),i)return r.opts.animationEffect&&e&&d.$refs.container.css("transition-duration",e+"ms"),d.$refs.container.addClass("fancybox-is-open").trigger("focus"),d.loadSlide(r),void d.preload("image");l=n.fancybox.getTranslate(a.$slide),c=n.fancybox.getTranslate(d.$refs.stage),n.each(d.slides,function(t,e){n.fancybox.stop(e.$slide,!0)}),a.pos!==r.pos&&(a.isComplete=!1),a.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),o?(u=l.left-(a.pos*l.width+a.pos*a.opts.gutter),n.each(d.slides,function(t,i){i.$slide.removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var o=i.pos*l.width+i.pos*i.opts.gutter;n.fancybox.setTranslate(i.$slide,{top:0,left:o-c.left+u}),i.pos!==r.pos&&i.$slide.addClass("fancybox-slide--"+(i.pos>r.pos?"next":"previous")),f(i.$slide),n.fancybox.animate(i.$slide,{top:0,left:(i.pos-r.pos)*l.width+(i.pos-r.pos)*i.opts.gutter},e,function(){i.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),i.pos===d.currPos&&d.complete()})})):e&&r.opts.transitionEffect&&(h="fancybox-animated fancybox-fx-"+r.opts.transitionEffect,a.$slide.addClass("fancybox-slide--"+(a.pos>r.pos?"next":"previous")),n.fancybox.animate(a.$slide,h,e,function(){a.$slide.removeClass(h).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),r.isLoaded?d.revealContent(r):d.loadSlide(r),d.preload("image")}},createSlide:function(t){var e,i;return i=(i=t%this.group.length)<0?this.group.length+i:i,!this.slides[t]&&this.group[i]&&(e=n('<div class="fancybox-slide"></div>').appendTo(this.$refs.stage),this.slides[t]=n.extend(!0,{},this.group[i],{pos:t,$slide:e,isLoaded:!1}),this.updateSlide(this.slides[t])),this.slides[t]},scaleToActual:function(t,e,i){var o,s,r,a,l,c=this,h=c.current,u=h.$content,d=n.fancybox.getTranslate(h.$slide).width,f=n.fancybox.getTranslate(h.$slide).height,p=h.width,g=h.height;c.isAnimating||c.isMoved()||!u||"image"!=h.type||!h.isLoaded||h.hasError||(c.isAnimating=!0,n.fancybox.stop(u),t=void 0===t?.5*d:t,e=void 0===e?.5*f:e,(o=n.fancybox.getTranslate(u)).top-=n.fancybox.getTranslate(h.$slide).top,o.left-=n.fancybox.getTranslate(h.$slide).left,a=p/o.width,l=g/o.height,s=.5*d-.5*p,r=.5*f-.5*g,p>d&&((s=o.left*a-(t*a-t))>0&&(s=0),s<d-p&&(s=d-p)),g>f&&((r=o.top*l-(e*l-e))>0&&(r=0),r<f-g&&(r=f-g)),c.updateCursor(p,g),n.fancybox.animate(u,{top:r,left:s,scaleX:a,scaleY:l},i||330,function(){c.isAnimating=!1}),c.SlideShow&&c.SlideShow.isActive&&c.SlideShow.stop())},scaleToFit:function(t){var e,i=this,o=i.current,s=o.$content;i.isAnimating||i.isMoved()||!s||"image"!=o.type||!o.isLoaded||o.hasError||(i.isAnimating=!0,n.fancybox.stop(s),e=i.getFitPos(o),i.updateCursor(e.width,e.height),n.fancybox.animate(s,{top:e.top,left:e.left,scaleX:e.width/s.width(),scaleY:e.height/s.height()},t||330,function(){i.isAnimating=!1}))},getFitPos:function(t){var e,i,o,s,r=t.$content,a=t.$slide,l=t.width||t.opts.width,c=t.height||t.opts.height,h={};return!!(t.isLoaded&&r&&r.length)&&(e=n.fancybox.getTranslate(this.$refs.stage).width,i=n.fancybox.getTranslate(this.$refs.stage).height,e-=parseFloat(a.css("paddingLeft"))+parseFloat(a.css("paddingRight"))+parseFloat(r.css("marginLeft"))+parseFloat(r.css("marginRight")),i-=parseFloat(a.css("paddingTop"))+parseFloat(a.css("paddingBottom"))+parseFloat(r.css("marginTop"))+parseFloat(r.css("marginBottom")),l&&c||(l=e,c=i),(l*=o=Math.min(1,e/l,i/c))>e-.5&&(l=e),(c*=o)>i-.5&&(c=i),"image"===t.type?(h.top=Math.floor(.5*(i-c))+parseFloat(a.css("paddingTop")),h.left=Math.floor(.5*(e-l))+parseFloat(a.css("paddingLeft"))):"video"===t.contentType&&(c>l/(s=t.opts.width&&t.opts.height?l/c:t.opts.ratio||16/9)?c=l/s:l>c*s&&(l=c*s)),h.width=l,h.height=c,h)},update:function(t){var e=this;n.each(e.slides,function(n,i){e.updateSlide(i,t)})},updateSlide:function(t,e){var i=t&&t.$content,o=t.width||t.opts.width,s=t.height||t.opts.height,r=t.$slide;this.adjustCaption(t),i&&(o||s||"video"===t.contentType)&&!t.hasError&&(n.fancybox.stop(i),n.fancybox.setTranslate(i,this.getFitPos(t)),t.pos===this.currPos&&(this.isAnimating=!1,this.updateCursor())),this.adjustLayout(t),r.length&&(r.trigger("refresh"),t.pos===this.currPos&&this.$refs.toolbar.add(this.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",r.get(0).scrollHeight>r.get(0).clientHeight)),this.trigger("onUpdate",t,e)},centerSlide:function(t){var e=this,i=e.current,o=i.$slide;!e.isClosing&&i&&(o.siblings().css({transform:"",opacity:""}),o.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),n.fancybox.animate(o,{top:0,left:0,opacity:1},void 0===t?0:t,function(){o.css({transform:"",opacity:""}),i.isComplete||e.complete()},!1))},isMoved:function(t){var e,i,o=t||this.current;return!!o&&(i=n.fancybox.getTranslate(this.$refs.stage),e=n.fancybox.getTranslate(o.$slide),!o.$slide.hasClass("fancybox-animated")&&(Math.abs(e.top-i.top)>.5||Math.abs(e.left-i.left)>.5))},updateCursor:function(t,e){var i,o,s=this.current,r=this.$refs.container;s&&!this.isClosing&&this.Guestures&&(r.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),o=!!(i=this.canPan(t,e))||this.isZoomable(),r.toggleClass("fancybox-is-zoomable",o),n("[data-fancybox-zoom]").prop("disabled",!o),i?r.addClass("fancybox-can-pan"):o&&("zoom"===s.opts.clickContent||n.isFunction(s.opts.clickContent)&&"zoom"==s.opts.clickContent(s))?r.addClass("fancybox-can-zoomIn"):s.opts.touch&&(s.opts.touch.vertical||this.group.length>1)&&"video"!==s.contentType&&r.addClass("fancybox-can-swipe"))},isZoomable:function(){var t,e=this.current;if(e&&!this.isClosing&&"image"===e.type&&!e.hasError){if(!e.isLoaded)return!0;if((t=this.getFitPos(e))&&(e.width>t.width||e.height>t.height))return!0}return!1},isScaledDown:function(t,e){var i=!1,o=this.current,s=o.$content;return void 0!==t&&void 0!==e?i=t<o.width&&e<o.height:s&&(i=(i=n.fancybox.getTranslate(s)).width<o.width&&i.height<o.height),i},canPan:function(t,e){var i=this.current,o=null,s=!1;return"image"===i.type&&(i.isComplete||t&&e)&&!i.hasError&&(s=this.getFitPos(i),void 0!==t&&void 0!==e?o={width:t,height:e}:i.isComplete&&(o=n.fancybox.getTranslate(i.$content)),o&&s&&(s=Math.abs(o.width-s.width)>1.5||Math.abs(o.height-s.height)>1.5)),s},loadSlide:function(t){var e,i,o,s=this;if(!t.isLoading&&!t.isLoaded){if(t.isLoading=!0,!1===s.trigger("beforeLoad",t))return t.isLoading=!1,!1;switch(e=t.type,(i=t.$slide).off("refresh").trigger("onReset").addClass(t.opts.slideClass),e){case"image":s.setImage(t);break;case"iframe":s.setIframe(t);break;case"html":s.setContent(t,t.src||t.content);break;case"video":s.setContent(t,t.opts.video.tpl.replace(/\{\{src\}\}/gi,t.src).replace("{{format}}",t.opts.videoFormat||t.opts.video.format||"").replace("{{poster}}",t.thumb||""));break;case"inline":n(t.src).length?s.setContent(t,n(t.src)):s.setError(t);break;case"ajax":s.showLoading(t),o=n.ajax(n.extend({},t.opts.ajax.settings,{url:t.src,success:function(e,n){"success"===n&&s.setContent(t,e)},error:function(e,n){e&&"abort"!==n&&s.setError(t)}})),i.one("onReset",function(){o.abort()});break;default:s.setError(t)}return!0}},setImage:function(t){var i,o=this;setTimeout(function(){var e=t.$image;o.isClosing||!t.isLoading||e&&e.length&&e[0].complete||t.hasError||o.showLoading(t)},50),o.checkSrcset(t),t.$content=n('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide.addClass("fancybox-slide--image")),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&t.thumb&&(t.width=t.opts.width,t.height=t.opts.height,(i=e.createElement("img")).onerror=function(){n(this).remove(),t.$ghost=null},i.onload=function(){o.afterLoad(t)},t.$ghost=n(i).addClass("fancybox-image").appendTo(t.$content).attr("src",t.thumb)),o.setBigImage(t)},checkSrcset:function(e){var n,i,o,s,r=e.opts.srcset||e.opts.image.srcset;if(r){o=t.devicePixelRatio||1,s=t.innerWidth*o,(i=r.split(",").map(function(t){var e={};return t.trim().split(/\s+/).forEach(function(t,n){var i=parseInt(t.substring(0,t.length-1),10);if(0===n)return e.url=t;i&&(e.value=i,e.postfix=t[t.length-1])}),e})).sort(function(t,e){return t.value-e.value});for(var a=0;a<i.length;a++){var l=i[a];if("w"===l.postfix&&l.value>=s||"x"===l.postfix&&l.value>=o){n=l;break}}!n&&i.length&&(n=i[i.length-1]),n&&(e.src=n.url,e.width&&e.height&&"w"==n.postfix&&(e.height=e.width/e.height*n.value,e.width=n.value),e.opts.srcset=r)}},setBigImage:function(t){var i=this,o=e.createElement("img"),s=n(o);t.$image=s.one("error",function(){i.setError(t)}).one("load",function(){var e;t.$ghost||(i.resolveImageSlideSize(t,this.naturalWidth,this.naturalHeight),i.afterLoad(t)),i.isClosing||(t.opts.srcset&&((e=t.opts.sizes)&&"auto"!==e||(e=(t.width/t.height>1&&a.width()/a.height()>1?"100":Math.round(t.width/t.height*100))+"vw"),s.attr("sizes",e).attr("srcset",t.opts.srcset)),t.$ghost&&setTimeout(function(){t.$ghost&&!i.isClosing&&t.$ghost.hide()},Math.min(300,Math.max(1e3,t.height/1600))),i.hideLoading(t))}).addClass("fancybox-image").attr("src",t.src).appendTo(t.$content),(o.complete||"complete"==o.readyState)&&s.naturalWidth&&s.naturalHeight?s.trigger("load"):o.error&&s.trigger("error")},resolveImageSlideSize:function(t,e,n){var i=parseInt(t.opts.width,10),o=parseInt(t.opts.height,10);t.width=e,t.height=n,i>0&&(t.width=i,t.height=Math.floor(i*n/e)),o>0&&(t.width=Math.floor(o*e/n),t.height=o)},setIframe:function(t){var e,i=this,o=t.opts.iframe,s=t.$slide;n.fancybox.isMobile&&(o.css.overflow="scroll"),t.$content=n('<div class="fancybox-content'+(o.preload?" fancybox-is-hidden":"")+'"></div>').css(o.css).appendTo(s),s.addClass("fancybox-slide--"+t.contentType),t.$iframe=e=n(o.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(o.attr).appendTo(t.$content),o.preload?(i.showLoading(t),e.on("load.fb error.fb",function(e){this.isReady=1,t.$slide.trigger("refresh"),i.afterLoad(t)}),s.on("refresh.fb",function(){var n,i=t.$content,r=o.css.width,a=o.css.height;if(1===e[0].isReady){try{n=e.contents().find("body")}catch(t){}n&&n.length&&n.children().length&&(s.css("overflow","visible"),i.css({width:"100%","max-width":"100%",height:"9999px"}),void 0===r&&(r=Math.ceil(Math.max(n[0].clientWidth,n.outerWidth(!0)))),i.css("width",r||"").css("max-width",""),void 0===a&&(a=Math.ceil(Math.max(n[0].clientHeight,n.outerHeight(!0)))),i.css("height",a||""),s.css("overflow","auto")),i.removeClass("fancybox-is-hidden")}})):i.afterLoad(t),e.attr("src",t.src),s.one("onReset",function(){try{n(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(t){}n(this).off("refresh.fb").empty(),t.isLoaded=!1,t.isRevealed=!1})},setContent:function(t,e){var i;this.isClosing||(this.hideLoading(t),t.$content&&n.fancybox.stop(t.$content),t.$slide.empty(),(i=e)&&i.hasOwnProperty&&i instanceof n&&e.parent().length?((e.hasClass("fancybox-content")||e.parent().hasClass("fancybox-content"))&&e.parents(".fancybox-slide").trigger("onReset"),t.$placeholder=n("<div>").hide().insertAfter(e),e.css("display","inline-block")):t.hasError||("string"===n.type(e)&&(e=n("<div>").append(n.trim(e)).contents()),t.opts.filter&&(e=n("<div>").html(e).find(t.opts.filter))),t.$slide.one("onReset",function(){n(this).find("video,audio").trigger("pause"),t.$placeholder&&(t.$placeholder.after(e.removeClass("fancybox-content").hide()).remove(),t.$placeholder=null),t.$smallBtn&&(t.$smallBtn.remove(),t.$smallBtn=null),t.hasError||(n(this).empty(),t.isLoaded=!1,t.isRevealed=!1)}),n(e).appendTo(t.$slide),n(e).is("video,audio")&&(n(e).addClass("fancybox-video"),n(e).wrap("<div></div>"),t.contentType="video",t.opts.width=t.opts.width||n(e).attr("width"),t.opts.height=t.opts.height||n(e).attr("height")),t.$content=t.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),t.$content.siblings().hide(),t.$content.length||(t.$content=t.$slide.wrapInner("<div></div>").children().first()),t.$content.addClass("fancybox-content"),t.$slide.addClass("fancybox-slide--"+t.contentType),this.afterLoad(t))},setError:function(t){t.hasError=!0,t.$slide.trigger("onReset").removeClass("fancybox-slide--"+t.contentType).addClass("fancybox-slide--error"),t.contentType="html",this.setContent(t,this.translate(t,t.opts.errorTpl)),t.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(t){(t=t||this.current)&&!t.$spinner&&(t.$spinner=n(this.translate(this,this.opts.spinnerTpl)).appendTo(t.$slide).hide().fadeIn("fast"))},hideLoading:function(t){(t=t||this.current)&&t.$spinner&&(t.$spinner.stop().remove(),delete t.$spinner)},afterLoad:function(t){this.isClosing||(t.isLoading=!1,t.isLoaded=!0,this.trigger("afterLoad",t),this.hideLoading(t),!t.opts.smallBtn||t.$smallBtn&&t.$smallBtn.length||(t.$smallBtn=n(this.translate(t,t.opts.btnTpl.smallBtn)).appendTo(t.$content)),t.opts.protect&&t.$content&&!t.hasError&&(t.$content.on("contextmenu.fb",function(t){return 2==t.button&&t.preventDefault(),!0}),"image"===t.type&&n('<div class="fancybox-spaceball"></div>').appendTo(t.$content)),this.adjustCaption(t),this.adjustLayout(t),t.pos===this.currPos&&this.updateCursor(),this.revealContent(t))},adjustCaption:function(t){var e=t||this.current,n=e.opts.caption,i=this.$refs.caption,o=!1;e.opts.preventCaptionOverlap&&n&&n.length&&(e.pos!==this.currPos?((i=i.clone().empty().appendTo(i.parent())).html(n),o=i.outerHeight(!0),i.empty().remove()):this.$caption&&(o=this.$caption.outerHeight(!0)),e.$slide.css("padding-bottom",o||""))},adjustLayout:function(t){var e,n,i,o,s=t||this.current;s.isLoaded&&!0!==s.opts.disableLayoutFix&&(s.$content.css("margin-bottom",""),s.$content.outerHeight()>s.$slide.height()+.5&&(i=s.$slide[0].style["padding-bottom"],o=s.$slide.css("padding-bottom"),parseFloat(o)>0&&(e=s.$slide[0].scrollHeight,s.$slide.css("padding-bottom",0),Math.abs(e-s.$slide[0].scrollHeight)<1&&(n=o),s.$slide.css("padding-bottom",i))),s.$content.css("margin-bottom",n))},revealContent:function(t){var e,i,o,s,r=this,a=t.$slide,l=!1,c=!1,h=r.isMoved(t),u=t.isRevealed;return t.isRevealed=!0,e=t.opts[r.firstRun?"animationEffect":"transitionEffect"],o=t.opts[r.firstRun?"animationDuration":"transitionDuration"],o=parseInt(void 0===t.forcedDuration?o:t.forcedDuration,10),!h&&t.pos===r.currPos&&o||(e=!1),"zoom"===e&&(t.pos===r.currPos&&o&&"image"===t.type&&!t.hasError&&(c=r.getThumbPos(t))?l=r.getFitPos(t):e="fade"),"zoom"===e?(r.isAnimating=!0,l.scaleX=l.width/c.width,l.scaleY=l.height/c.height,"auto"==(s=t.opts.zoomOpacity)&&(s=Math.abs(t.width/t.height-c.width/c.height)>.1),s&&(c.opacity=.1,l.opacity=1),n.fancybox.setTranslate(t.$content.removeClass("fancybox-is-hidden"),c),f(t.$content),void n.fancybox.animate(t.$content,l,o,function(){r.isAnimating=!1,r.complete()})):(r.updateSlide(t),e?(n.fancybox.stop(a),i="fancybox-slide--"+(t.pos>=r.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+e,a.addClass(i).removeClass("fancybox-slide--current"),t.$content.removeClass("fancybox-is-hidden"),f(a),"image"!==t.type&&t.$content.hide().show(0),void n.fancybox.animate(a,"fancybox-slide--current",o,function(){a.removeClass(i).css({transform:"",opacity:""}),t.pos===r.currPos&&r.complete()},!0)):(t.$content.removeClass("fancybox-is-hidden"),u||!h||"image"!==t.type||t.hasError||t.$content.hide().fadeIn("fast"),void(t.pos===r.currPos&&r.complete())))},getThumbPos:function(t){var i,o,s,r,a,l,c=t.$thumb;return!(!c||!function(t){var i,o;return!(!t||t.ownerDocument!==e)&&(n(".fancybox-container").css("pointer-events","none"),i={x:t.getBoundingClientRect().left+t.offsetWidth/2,y:t.getBoundingClientRect().top+t.offsetHeight/2},o=e.elementFromPoint(i.x,i.y)===t,n(".fancybox-container").css("pointer-events",""),o)}(c[0]))&&(o=n.fancybox.getTranslate(c),s=parseFloat(c.css("border-top-width")||0),r=parseFloat(c.css("border-right-width")||0),a=parseFloat(c.css("border-bottom-width")||0),l=parseFloat(c.css("border-left-width")||0),i={top:o.top+s,left:o.left+l,width:o.width-r-l,height:o.height-s-a,scaleX:1,scaleY:1},o.width>0&&o.height>0&&i)},complete:function(){var t,e=this,i=e.current,o={};!e.isMoved()&&i.isLoaded&&(i.isComplete||(i.isComplete=!0,i.$slide.siblings().trigger("onReset"),e.preload("inline"),f(i.$slide),i.$slide.addClass("fancybox-slide--complete"),n.each(e.slides,function(t,i){i.pos>=e.currPos-1&&i.pos<=e.currPos+1?o[i.pos]=i:i&&(n.fancybox.stop(i.$slide),i.$slide.off().remove())}),e.slides=o),e.isAnimating=!1,e.updateCursor(),e.trigger("afterShow"),i.opts.video.autoStart&&i.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){this.webkitExitFullscreen&&this.webkitExitFullscreen(),e.next()}),i.opts.autoFocus&&"html"===i.contentType&&((t=i.$content.find("input[autofocus]:enabled:visible:first")).length?t.trigger("focus"):e.focus(null,!0)),i.$slide.scrollTop(0).scrollLeft(0))},preload:function(t){var e,n;this.group.length<2||(n=this.slides[this.currPos+1],(e=this.slides[this.currPos-1])&&e.type===t&&this.loadSlide(e),n&&n.type===t&&this.loadSlide(n))},focus:function(t,i){var o,s,r=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");this.isClosing||((o=(o=!t&&this.current&&this.current.isComplete?this.current.$slide.find("*:visible"+(i?":not(.fancybox-close-small)":"")):this.$refs.container.find("*:visible")).filter(r).filter(function(){return"hidden"!==n(this).css("visibility")&&!n(this).hasClass("disabled")})).length?(s=o.index(e.activeElement),t&&t.shiftKey?(s<0||0==s)&&(t.preventDefault(),o.eq(o.length-1).trigger("focus")):(s<0||s==o.length-1)&&(t&&t.preventDefault(),o.eq(0).trigger("focus"))):this.$refs.container.trigger("focus"))},activate:function(){var t=this;n(".fancybox-container").each(function(){var e=n(this).data("FancyBox");e&&e.id!==t.id&&!e.isClosing&&(e.trigger("onDeactivate"),e.removeEvents(),e.isVisible=!1)}),t.isVisible=!0,(t.current||t.isIdle)&&(t.update(),t.updateControls()),t.trigger("onActivate"),t.addEvents()},close:function(t,e){var i,o,s,r,a,l,c,u=this,d=u.current,p=function(){u.cleanUp(t)};return!u.isClosing&&(u.isClosing=!0,!1===u.trigger("beforeClose",t)?(u.isClosing=!1,h(function(){u.update()}),!1):(u.removeEvents(),s=d.$content,i=d.opts.animationEffect,o=n.isNumeric(e)?e:i?d.opts.animationDuration:0,d.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==t?n.fancybox.stop(d.$slide):i=!1,d.$slide.siblings().trigger("onReset").remove(),o&&u.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",o+"ms"),u.hideLoading(d),u.hideControls(!0),u.updateCursor(),"zoom"!==i||s&&o&&"image"===d.type&&!u.isMoved()&&!d.hasError&&(c=u.getThumbPos(d))||(i="fade"),"zoom"===i?(n.fancybox.stop(s),l={top:(r=n.fancybox.getTranslate(s)).top,left:r.left,scaleX:r.width/c.width,scaleY:r.height/c.height,width:c.width,height:c.height},"auto"==(a=d.opts.zoomOpacity)&&(a=Math.abs(d.width/d.height-c.width/c.height)>.1),a&&(c.opacity=0),n.fancybox.setTranslate(s,l),f(s),n.fancybox.animate(s,c,o,p),!0):(i&&o?n.fancybox.animate(d.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+i,o,p):!0===t?setTimeout(p,o):p(),!0)))},cleanUp:function(e){var i,o,s,r=this.current.opts.$orig;this.current.$slide.trigger("onReset"),this.$refs.container.empty().remove(),this.trigger("afterClose",e),this.current.opts.backFocus&&(r&&r.length&&r.is(":visible")||(r=this.$trigger),r&&r.length&&(o=t.scrollX,s=t.scrollY,r.trigger("focus"),n("html, body").scrollTop(s).scrollLeft(o))),this.current=null,(i=n.fancybox.getInstance())?i.activate():(n("body").removeClass("fancybox-active compensate-for-scrollbar"),n("#fancybox-style-noscroll").remove())},trigger:function(t,e){var i,o=Array.prototype.slice.call(arguments,1),s=e&&e.opts?e:this.current;if(s?o.unshift(s):s=this,o.unshift(this),n.isFunction(s.opts[t])&&(i=s.opts[t].apply(s,o)),!1===i)return i;"afterClose"!==t&&this.$refs?this.$refs.container.trigger(t+".fb",o):l.trigger(t+".fb",o)},updateControls:function(){var t=this.current,i=t.index,o=this.$refs.container,s=this.$refs.caption,r=t.opts.caption;t.$slide.trigger("refresh"),this.$caption=r&&r.length?s.html(r):null,this.hasHiddenControls||this.isIdle||this.showControls(),o.find("[data-fancybox-count]").html(this.group.length),o.find("[data-fancybox-index]").html(i+1),o.find("[data-fancybox-prev]").prop("disabled",!t.opts.loop&&i<=0),o.find("[data-fancybox-next]").prop("disabled",!t.opts.loop&&i>=this.group.length-1),"image"===t.type?o.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",t.opts.image.src||t.src).show():t.opts.toolbar&&o.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),n(e.activeElement).is(":hidden,[disabled]")&&this.$refs.container.trigger("focus")},hideControls:function(t){var e=["infobar","toolbar","nav"];!t&&this.current.opts.preventCaptionOverlap||e.push("caption"),this.$refs.container.removeClass(e.map(function(t){return"fancybox-show-"+t}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var t=this.current?this.current.opts:this.opts,e=this.$refs.container;this.hasHiddenControls=!1,this.idleSecondsCounter=0,e.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&this.group.length>1)).toggleClass("fancybox-show-caption",!!this.$caption).toggleClass("fancybox-show-nav",!!(t.arrows&&this.group.length>1)).toggleClass("fancybox-is-modal",!!t.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),n.fancybox={version:"3.5.2",defaults:r,getInstance:function(t){var e=n('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),i=Array.prototype.slice.call(arguments,1);return e instanceof g&&("string"===n.type(t)?e[t].apply(e,i):"function"===n.type(t)&&t.apply(e,i),e)},open:function(t,e,n){return new g(t,e,n)},close:function(t){var e=this.getInstance();e&&(e.close(),!0===t&&this.close(t))},destroy:function(){this.close(!0),l.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:(o=e.createElement("div"),t.getComputedStyle&&t.getComputedStyle(o)&&t.getComputedStyle(o).getPropertyValue("transform")&&!(e.documentMode&&e.documentMode<11)),getTranslate:function(t){var e;return!(!t||!t.length)&&{top:(e=t[0].getBoundingClientRect()).top||0,left:e.left||0,width:e.width,height:e.height,opacity:parseFloat(t.css("opacity"))}},setTranslate:function(t,e){var n="",i={};if(t&&e)return void 0===e.left&&void 0===e.top||(n=(void 0===e.left?t.position().left:e.left)+"px, "+(void 0===e.top?t.position().top:e.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),void 0!==e.scaleX&&void 0!==e.scaleY?n+=" scale("+e.scaleX+", "+e.scaleY+")":void 0!==e.scaleX&&(n+=" scaleX("+e.scaleX+")"),n.length&&(i.transform=n),void 0!==e.opacity&&(i.opacity=e.opacity),void 0!==e.width&&(i.width=e.width),void 0!==e.height&&(i.height=e.height),t.css(i)},animate:function(t,e,i,o,s){var r,a=this;n.isFunction(i)&&(o=i,i=null),a.stop(t),r=a.getTranslate(t),t.on(d,function(l){(!l||!l.originalEvent||t.is(l.originalEvent.target)&&"z-index"!=l.originalEvent.propertyName)&&(a.stop(t),n.isNumeric(i)&&t.css("transition-duration",""),n.isPlainObject(e)?void 0!==e.scaleX&&void 0!==e.scaleY&&a.setTranslate(t,{top:e.top,left:e.left,width:r.width*e.scaleX,height:r.height*e.scaleY,scaleX:1,scaleY:1}):!0!==s&&t.removeClass(e),n.isFunction(o)&&o(l))}),n.isNumeric(i)&&t.css("transition-duration",i+"ms"),n.isPlainObject(e)?(void 0!==e.scaleX&&void 0!==e.scaleY&&(delete e.width,delete e.height,t.parent().hasClass("fancybox-slide--image")&&t.parent().addClass("fancybox-is-scaling")),n.fancybox.setTranslate(t,e)):t.addClass(e),t.data("timer",setTimeout(function(){t.trigger(d)},i+33))},stop:function(t,e){t&&t.length&&(clearTimeout(t.data("timer")),e&&t.trigger(d),t.off(d).css("transition-duration",""),t.parent().removeClass("fancybox-is-scaling"))}},n.fn.fancybox=function(t){var e;return(e=(t=t||{}).selector||!1)?n("body").off("click.fb-start",e).on("click.fb-start",e,{options:t},m):this.off("click.fb-start").on("click.fb-start",{items:this,options:t},m),this},l.on("click.fb-start","[data-fancybox]",m),l.on("click.fb-start","[data-fancybox-trigger]",function(t){n('[data-fancybox="'+n(this).attr("data-fancybox-trigger")+'"]').eq(n(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:n(this)})}),s=null,l.on("mousedown mouseup focus blur",".fancybox-button",function(t){switch(t.type){case"mousedown":s=n(this);break;case"mouseup":s=null;break;case"focusin":n(".fancybox-button").removeClass("fancybox-focus"),n(this).is(s)||n(this).is("[disabled]")||n(this).addClass("fancybox-focus");break;case"focusout":n(".fancybox-button").removeClass("fancybox-focus")}})}function m(t,e){var i,o,s,r=[],a=0;t&&t.isDefaultPrevented()||(t.preventDefault(),e=e||{},t&&t.data&&(e=p(t.data.options,e)),i=e.$target||n(t.currentTarget).trigger("blur"),(s=n.fancybox.getInstance())&&s.$trigger&&s.$trigger.is(i)||(r=e.selector?n(e.selector):(o=i.attr("data-fancybox")||"")?(r=t.data?t.data.items:[]).length?r.filter('[data-fancybox="'+o+'"]'):n('[data-fancybox="'+o+'"]'):[i],(a=n(r).index(i))<0&&(a=0),(s=n.fancybox.open(r,e,a)).$trigger=i))}}(window,document,jQuery),function(t){"use strict";var e={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"//www.youtube-nocookie.com/embed/$4",thumb:"//img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/?ll="+(t[9]?t[9]+"&z="+Math.floor(t[10])+(t[12]?t[12].replace(/^\//,"&"):""):t[12]+"").replace(/\?/,"&")+"&output="+(t[12]&&t[12].indexOf("layer=c")>0?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/maps?q="+t[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}},n=function(e,n,i){if(e)return i=i||"","object"===t.type(i)&&(i=t.param(i,!0)),t.each(n,function(t,n){e=e.replace("$"+t,n||"")}),i.length&&(e+=(e.indexOf("?")>0?"&":"?")+i),e};t(document).on("objectNeedsType.fb",function(i,o,s){var r,a,l,c,h,u,d,f=s.src||"",p=!1;r=t.extend(!0,{},e,s.opts.media),t.each(r,function(e,i){if(l=f.match(i.matcher)){if(p=i.type,d=e,u={},i.paramPlace&&l[i.paramPlace]){"?"==(h=l[i.paramPlace])[0]&&(h=h.substring(1)),h=h.split("&");for(var o=0;o<h.length;++o){var r=h[o].split("=",2);2==r.length&&(u[r[0]]=decodeURIComponent(r[1].replace(/\+/g," ")))}}return c=t.extend(!0,{},i.params,s.opts[e],u),f="function"===t.type(i.url)?i.url.call(this,l,c,s):n(i.url,l,c),a="function"===t.type(i.thumb)?i.thumb.call(this,l,c,s):n(i.thumb,l),"youtube"===e?f=f.replace(/&t=((\d+)m)?(\d+)s/,function(t,e,n,i){return"&start="+((n?60*parseInt(n,10):0)+parseInt(i,10))}):"vimeo"===e&&(f=f.replace("&%23","#")),!1}}),p?(s.opts.thumb||s.opts.$thumb&&s.opts.$thumb.length||(s.opts.thumb=a),"iframe"===p&&(s.opts=t.extend(!0,s.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),t.extend(s,{type:p,src:f,origSrc:s.src,contentSource:d,contentType:"image"===p?"image":"gmap_place"==d||"gmap_search"==d?"map":"video"})):f&&(s.type=s.opts.defaultType)});var i={youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(t){var e,n=this;this[t].loaded?setTimeout(function(){n.done(t)}):this[t].loading||(this[t].loading=!0,(e=document.createElement("script")).type="text/javascript",e.src=this[t].src,"youtube"===t?window.onYouTubeIframeAPIReady=function(){n[t].loaded=!0,n.done(t)}:e.onload=function(){n[t].loaded=!0,n.done(t)},document.body.appendChild(e))},done:function(e){var n,i;"youtube"===e&&delete window.onYouTubeIframeAPIReady,(n=t.fancybox.getInstance())&&(i=n.current.$content.find("iframe"),"youtube"===e&&void 0!==YT&&YT?new YT.Player(i.attr("id"),{events:{onStateChange:function(t){0==t.data&&n.next()}}}):"vimeo"===e&&void 0!==Vimeo&&Vimeo&&new Vimeo.Player(i).on("ended",function(){n.next()}))}};t(document).on({"afterShow.fb":function(t,e,n){e.group.length>1&&("youtube"===n.contentSource||"vimeo"===n.contentSource)&&i.load(n.contentSource)}})}(jQuery),function(t,e,n){"use strict";var i=t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||function(e){return t.setTimeout(e,1e3/60)},o=t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.mozCancelAnimationFrame||t.oCancelAnimationFrame||function(e){t.clearTimeout(e)},s=function(e){var n=[];for(var i in e=(e=e.originalEvent||e||t.e).touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e])e[i].pageX?n.push({x:e[i].pageX,y:e[i].pageY}):e[i].clientX&&n.push({x:e[i].clientX,y:e[i].clientY});return n},r=function(t,e,n){return e&&t?"x"===n?t.x-e.x:"y"===n?t.y-e.y:Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)):0},a=function(t){if(t.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||n.isFunction(t.get(0).onclick)||t.data("selectable"))return!0;for(var e=0,i=t[0].attributes,o=i.length;e<o;e++)if("data-fancybox-"===i[e].nodeName.substr(0,14))return!0;return!1},l=function(e){for(var n,i,o,s,r,a=!1;n=e.get(0),i=void 0,o=void 0,s=void 0,r=void 0,i=t.getComputedStyle(n)["overflow-y"],o=t.getComputedStyle(n)["overflow-x"],s=("scroll"===i||"auto"===i)&&n.scrollHeight>n.clientHeight,r=("scroll"===o||"auto"===o)&&n.scrollWidth>n.clientWidth,!(a=s||r)&&(e=e.parent()).length&&!e.hasClass("fancybox-stage")&&!e.is("body"););return a},c=function(t){this.instance=t,this.$bg=t.$refs.bg,this.$stage=t.$refs.stage,this.$container=t.$refs.container,this.destroy(),this.$container.on("touchstart.fb.touch mousedown.fb.touch",n.proxy(this,"ontouchstart"))};c.prototype.destroy=function(){this.$container.off(".fb.touch"),n(e).off(".fb.touch"),this.requestId&&(o(this.requestId),this.requestId=null),this.tapped&&(clearTimeout(this.tapped),this.tapped=null)},c.prototype.ontouchstart=function(i){var o=n(i.target),c=this.instance,h=c.current,u=h.$slide,d=h.$content,f="touchstart"==i.type;if(f&&this.$container.off("mousedown.fb.touch"),(!i.originalEvent||2!=i.originalEvent.button)&&u.length&&o.length&&!a(o)&&!a(o.parent())&&(o.is("img")||!(i.originalEvent.clientX>o[0].clientWidth+o.offset().left))){if(!h||c.isAnimating||h.$slide.hasClass("fancybox-animated"))return i.stopPropagation(),void i.preventDefault();this.realPoints=this.startPoints=s(i),this.startPoints.length&&(h.touch&&i.stopPropagation(),this.startEvent=i,this.canTap=!0,this.$target=o,this.$content=d,this.opts=h.opts.touch,this.isPanning=!1,this.isSwiping=!1,this.isZooming=!1,this.isScrolling=!1,this.canPan=c.canPan(),this.startTime=(new Date).getTime(),this.distanceX=this.distanceY=this.distance=0,this.canvasWidth=Math.round(u[0].clientWidth),this.canvasHeight=Math.round(u[0].clientHeight),this.contentLastPos=null,this.contentStartPos=n.fancybox.getTranslate(this.$content)||{top:0,left:0},this.sliderStartPos=n.fancybox.getTranslate(u),this.stagePos=n.fancybox.getTranslate(c.$refs.stage),this.sliderStartPos.top-=this.stagePos.top,this.sliderStartPos.left-=this.stagePos.left,this.contentStartPos.top-=this.stagePos.top,this.contentStartPos.left-=this.stagePos.left,n(e).off(".fb.touch").on(f?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",n.proxy(this,"ontouchend")).on(f?"touchmove.fb.touch":"mousemove.fb.touch",n.proxy(this,"ontouchmove")),n.fancybox.isMobile&&e.addEventListener("scroll",this.onscroll,!0),((this.opts||this.canPan)&&(o.is(this.$stage)||this.$stage.find(o).length)||(o.is(".fancybox-image")&&i.preventDefault(),n.fancybox.isMobile&&o.hasClass("fancybox-caption")))&&(this.isScrollable=l(o)||l(o.parent()),n.fancybox.isMobile&&this.isScrollable||i.preventDefault(),(1===this.startPoints.length||h.hasError)&&(this.canPan?(n.fancybox.stop(this.$content),this.isPanning=!0):this.isSwiping=!0,this.$container.addClass("fancybox-is-grabbing")),2===this.startPoints.length&&"image"===h.type&&(h.isLoaded||h.$ghost)&&(this.canTap=!1,this.isSwiping=!1,this.isPanning=!1,this.isZooming=!0,n.fancybox.stop(this.$content),this.centerPointStartX=.5*(this.startPoints[0].x+this.startPoints[1].x)-n(t).scrollLeft(),this.centerPointStartY=.5*(this.startPoints[0].y+this.startPoints[1].y)-n(t).scrollTop(),this.percentageOfImageAtPinchPointX=(this.centerPointStartX-this.contentStartPos.left)/this.contentStartPos.width,this.percentageOfImageAtPinchPointY=(this.centerPointStartY-this.contentStartPos.top)/this.contentStartPos.height,this.startDistanceBetweenFingers=r(this.startPoints[0],this.startPoints[1]))))}},c.prototype.onscroll=function(t){this.isScrolling=!0,e.removeEventListener("scroll",this.onscroll,!0)},c.prototype.ontouchmove=function(t){void 0===t.originalEvent.buttons||0!==t.originalEvent.buttons?this.isScrolling?this.canTap=!1:(this.newPoints=s(t),(this.opts||this.canPan)&&this.newPoints.length&&this.newPoints.length&&(this.isSwiping&&!0===this.isSwiping||t.preventDefault(),this.distanceX=r(this.newPoints[0],this.startPoints[0],"x"),this.distanceY=r(this.newPoints[0],this.startPoints[0],"y"),this.distance=r(this.newPoints[0],this.startPoints[0]),this.distance>0&&(this.isSwiping?this.onSwipe(t):this.isPanning?this.onPan():this.isZooming&&this.onZoom()))):this.ontouchend(t)},c.prototype.onSwipe=function(e){var s,r=this,a=r.instance,l=r.isSwiping,c=r.sliderStartPos.left||0;if(!0!==l)"x"==l&&(r.distanceX>0&&(r.instance.group.length<2||0===r.instance.current.index&&!r.instance.current.opts.loop)?c+=Math.pow(r.distanceX,.8):r.distanceX<0&&(r.instance.group.length<2||r.instance.current.index===r.instance.group.length-1&&!r.instance.current.opts.loop)?c-=Math.pow(-r.distanceX,.8):c+=r.distanceX),r.sliderLastPos={top:"x"==l?0:r.sliderStartPos.top+r.distanceY,left:c},r.requestId&&(o(r.requestId),r.requestId=null),r.requestId=i(function(){r.sliderLastPos&&(n.each(r.instance.slides,function(t,e){var i=e.pos-r.instance.currPos;n.fancybox.setTranslate(e.$slide,{top:r.sliderLastPos.top,left:r.sliderLastPos.left+i*r.canvasWidth+i*e.opts.gutter})}),r.$container.addClass("fancybox-is-sliding"))});else if(Math.abs(r.distance)>10){if(r.canTap=!1,a.group.length<2&&r.opts.vertical?r.isSwiping="y":a.isDragging||!1===r.opts.vertical||"auto"===r.opts.vertical&&n(t).width()>800?r.isSwiping="x":(s=Math.abs(180*Math.atan2(r.distanceY,r.distanceX)/Math.PI),r.isSwiping=s>45&&s<135?"y":"x"),"y"===r.isSwiping&&n.fancybox.isMobile&&r.isScrollable)return void(r.isScrolling=!0);a.isDragging=r.isSwiping,r.startPoints=r.newPoints,n.each(a.slides,function(t,e){var i,o;n.fancybox.stop(e.$slide),i=n.fancybox.getTranslate(e.$slide),o=n.fancybox.getTranslate(a.$refs.stage),e.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),e.pos===a.current.pos&&(r.sliderStartPos.top=i.top-o.top,r.sliderStartPos.left=i.left-o.left),n.fancybox.setTranslate(e.$slide,{top:i.top-o.top,left:i.left-o.left})}),a.SlideShow&&a.SlideShow.isActive&&a.SlideShow.stop()}},c.prototype.onPan=function(){var t=this;r(t.newPoints[0],t.realPoints[0])<(n.fancybox.isMobile?10:5)?t.startPoints=t.newPoints:(t.canTap=!1,t.contentLastPos=t.limitMovement(),t.requestId&&o(t.requestId),t.requestId=i(function(){n.fancybox.setTranslate(t.$content,t.contentLastPos)}))},c.prototype.limitMovement=function(){var t,e,n,i,o,s,r=this.canvasWidth,a=this.canvasHeight,l=this.distanceX,c=this.distanceY,h=this.contentStartPos,u=h.left,d=h.top,f=h.width,p=h.height;return o=f>r?u+l:u,s=d+c,t=Math.max(0,.5*r-.5*f),e=Math.max(0,.5*a-.5*p),n=Math.min(r-f,.5*r-.5*f),i=Math.min(a-p,.5*a-.5*p),l>0&&o>t&&(o=t-1+Math.pow(-t+u+l,.8)||0),l<0&&o<n&&(o=n+1-Math.pow(n-u-l,.8)||0),c>0&&s>e&&(s=e-1+Math.pow(-e+d+c,.8)||0),c<0&&s<i&&(s=i+1-Math.pow(i-d-c,.8)||0),{top:s,left:o}},c.prototype.limitPosition=function(t,e,n,i){var o=this.canvasWidth,s=this.canvasHeight;return t=n>o?(t=t>0?0:t)<o-n?o-n:t:Math.max(0,o/2-n/2),{top:e=i>s?(e=e>0?0:e)<s-i?s-i:e:Math.max(0,s/2-i/2),left:t}},c.prototype.onZoom=function(){var e=this,s=e.contentStartPos,a=s.width,l=s.height,c=s.left,h=s.top,u=r(e.newPoints[0],e.newPoints[1])/e.startDistanceBetweenFingers,d=Math.floor(a*u),f=Math.floor(l*u),p=(a-d)*e.percentageOfImageAtPinchPointX,g=(l-f)*e.percentageOfImageAtPinchPointY,m=(e.newPoints[0].x+e.newPoints[1].x)/2-n(t).scrollLeft(),v=(e.newPoints[0].y+e.newPoints[1].y)/2-n(t).scrollTop(),b=m-e.centerPointStartX,y={top:h+(g+(v-e.centerPointStartY)),left:c+(p+b),scaleX:u,scaleY:u};e.canTap=!1,e.newWidth=d,e.newHeight=f,e.contentLastPos=y,e.requestId&&o(e.requestId),e.requestId=i(function(){n.fancybox.setTranslate(e.$content,e.contentLastPos)})},c.prototype.ontouchend=function(t){var i=this.isSwiping,r=this.isPanning,a=this.isZooming,l=this.isScrolling;if(this.endPoints=s(t),this.dMs=Math.max((new Date).getTime()-this.startTime,1),this.$container.removeClass("fancybox-is-grabbing"),n(e).off(".fb.touch"),e.removeEventListener("scroll",this.onscroll,!0),this.requestId&&(o(this.requestId),this.requestId=null),this.isSwiping=!1,this.isPanning=!1,this.isZooming=!1,this.isScrolling=!1,this.instance.isDragging=!1,this.canTap)return this.onTap(t);this.speed=100,this.velocityX=this.distanceX/this.dMs*.5,this.velocityY=this.distanceY/this.dMs*.5,r?this.endPanning():a?this.endZooming():this.endSwiping(i,l)},c.prototype.endSwiping=function(t,e){var i=!1,o=this.instance.group.length,s=Math.abs(this.distanceX),r="x"==t&&o>1&&(this.dMs>130&&s>10||s>50);this.sliderLastPos=null,"y"==t&&!e&&Math.abs(this.distanceY)>50?(n.fancybox.animate(this.instance.current.$slide,{top:this.sliderStartPos.top+this.distanceY+150*this.velocityY,opacity:0},200),i=this.instance.close(!0,250)):r&&this.distanceX>0?i=this.instance.previous(300):r&&this.distanceX<0&&(i=this.instance.next(300)),!1!==i||"x"!=t&&"y"!=t||this.instance.centerSlide(200),this.$container.removeClass("fancybox-is-sliding")},c.prototype.endPanning=function(){var t,e,i;this.contentLastPos&&(!1===this.opts.momentum||this.dMs>350?(t=this.contentLastPos.left,e=this.contentLastPos.top):(t=this.contentLastPos.left+500*this.velocityX,e=this.contentLastPos.top+500*this.velocityY),(i=this.limitPosition(t,e,this.contentStartPos.width,this.contentStartPos.height)).width=this.contentStartPos.width,i.height=this.contentStartPos.height,n.fancybox.animate(this.$content,i,330))},c.prototype.endZooming=function(){var t,e,i,o,s=this.instance.current,r=this.newWidth,a=this.newHeight;this.contentLastPos&&(t=this.contentLastPos.left,o={top:e=this.contentLastPos.top,left:t,width:r,height:a,scaleX:1,scaleY:1},n.fancybox.setTranslate(this.$content,o),r<this.canvasWidth&&a<this.canvasHeight?this.instance.scaleToFit(150):r>s.width||a>s.height?this.instance.scaleToActual(this.centerPointStartX,this.centerPointStartY,150):(i=this.limitPosition(t,e,r,a),n.fancybox.animate(this.$content,i,150)))},c.prototype.onTap=function(e){var i,o=this,r=n(e.target),a=o.instance,l=a.current,c=e&&s(e)||o.startPoints,h=c[0]?c[0].x-n(t).scrollLeft()-o.stagePos.left:0,u=c[0]?c[0].y-n(t).scrollTop()-o.stagePos.top:0,d=function(t){var i=l.opts[t];if(n.isFunction(i)&&(i=i.apply(a,[l,e])),i)switch(i){case"close":a.close(o.startEvent);break;case"toggleControls":a.toggleControls();break;case"next":a.next();break;case"nextOrClose":a.group.length>1?a.next():a.close(o.startEvent);break;case"zoom":"image"==l.type&&(l.isLoaded||l.$ghost)&&(a.canPan()?a.scaleToFit():a.isScaledDown()?a.scaleToActual(h,u):a.group.length<2&&a.close(o.startEvent))}};if((!e.originalEvent||2!=e.originalEvent.button)&&(r.is("img")||!(h>r[0].clientWidth+r.offset().left))){if(r.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))i="Outside";else if(r.is(".fancybox-slide"))i="Slide";else{if(!a.current.$content||!a.current.$content.find(r).addBack().filter(r).length)return;i="Content"}if(o.tapped){if(clearTimeout(o.tapped),o.tapped=null,Math.abs(h-o.tapX)>50||Math.abs(u-o.tapY)>50)return this;d("dblclick"+i)}else o.tapX=h,o.tapY=u,l.opts["dblclick"+i]&&l.opts["dblclick"+i]!==l.opts["click"+i]?o.tapped=setTimeout(function(){o.tapped=null,a.isAnimating||d("click"+i)},500):d("click"+i);return this}},n(e).on("onActivate.fb",function(t,e){e&&!e.Guestures&&(e.Guestures=new c(e))}).on("beforeClose.fb",function(t,e){e&&e.Guestures&&e.Guestures.destroy()})}(window,document,jQuery),function(t,e){"use strict";e.extend(!0,e.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});var n=function(t){this.instance=t,this.init()};e.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function(){var t=this,n=t.instance,i=n.group[n.currIndex].opts.slideShow;t.$button=n.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){t.toggle()}),n.group.length<2||!i?t.$button.hide():i.progress&&(t.$progress=e('<div class="fancybox-progress"></div>').appendTo(n.$refs.inner))},set:function(t){var n=this.instance,i=n.current;i&&(!0===t||i.opts.loop||n.currIndex<n.group.length-1)?this.isActive&&"video"!==i.contentType&&(this.$progress&&e.fancybox.animate(this.$progress.show(),{scaleX:1},i.opts.slideShow.speed),this.timer=setTimeout(function(){n.current.opts.loop||n.current.index!=n.group.length-1?n.next():n.jumpTo(0)},i.opts.slideShow.speed)):(this.stop(),n.idleSecondsCounter=0,n.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null,this.$progress&&this.$progress.removeAttr("style").hide()},start:function(){var t=this.instance.current;t&&(this.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),this.isActive=!0,t.isComplete&&this.set(!0),this.instance.trigger("onSlideShowChange",!0))},stop:function(){var t=this.instance.current;this.clear(),this.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),this.isActive=!1,this.instance.trigger("onSlideShowChange",!1),this.$progress&&this.$progress.removeAttr("style").hide()},toggle:function(){this.isActive?this.stop():this.start()}}),e(t).on({"onInit.fb":function(t,e){e&&!e.SlideShow&&(e.SlideShow=new n(e))},"beforeShow.fb":function(t,e,n,i){var o=e&&e.SlideShow;i?o&&n.opts.slideShow.autoStart&&o.start():o&&o.isActive&&o.clear()},"afterShow.fb":function(t,e,n){var i=e&&e.SlideShow;i&&i.isActive&&i.set()},"afterKeydown.fb":function(n,i,o,s,r){var a=i&&i.SlideShow;!a||!o.opts.slideShow||80!==r&&32!==r||e(t.activeElement).is("button,a,input")||(s.preventDefault(),a.toggle())},"beforeClose.fb onDeactivate.fb":function(t,e){var n=e&&e.SlideShow;n&&n.stop()}}),e(t).on("visibilitychange",function(){var n=e.fancybox.getInstance(),i=n&&n.SlideShow;i&&i.isActive&&(t.hidden?i.clear():i.set())})}(document,jQuery),function(t,e){"use strict";var n=function(){for(var e=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],n={},i=0;i<e.length;i++){var o=e[i];if(o&&o[1]in t){for(var s=0;s<o.length;s++)n[e[0][s]]=o[s];return n}}return!1}();if(n){var i={request:function(e){(e=e||t.documentElement)[n.requestFullscreen](e.ALLOW_KEYBOARD_INPUT)},exit:function(){t[n.exitFullscreen]()},toggle:function(e){e=e||t.documentElement,this.isFullscreen()?this.exit():this.request(e)},isFullscreen:function(){return Boolean(t[n.fullscreenElement])},enabled:function(){return Boolean(t[n.fullscreenEnabled])}};e.extend(!0,e.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),e(t).on(n.fullscreenchange,function(){var t=i.isFullscreen(),n=e.fancybox.getInstance();n&&(n.current&&"image"===n.current.type&&n.isAnimating&&(n.current.$content.css("transition","none"),n.isAnimating=!1,n.update(!0,!0,0)),n.trigger("onFullscreenChange",t),n.$refs.container.toggleClass("fancybox-is-fullscreen",t),n.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!t).toggleClass("fancybox-button--fsexit",t))})}e(t).on({"onInit.fb":function(t,e){n?e&&e.group[e.currIndex].opts.fullScreen?(e.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(t){t.stopPropagation(),t.preventDefault(),i.toggle()}),e.opts.fullScreen&&!0===e.opts.fullScreen.autoStart&&i.request(),e.FullScreen=i):e&&e.$refs.toolbar.find("[data-fancybox-fullscreen]").hide():e.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(t,e,n,i,o){e&&e.FullScreen&&70===o&&(i.preventDefault(),e.FullScreen.toggle())},"beforeClose.fb":function(t,e){e&&e.FullScreen&&e.$refs.container.hasClass("fancybox-is-fullscreen")&&i.exit()}})}(document,jQuery),function(t,e){"use strict";var n="fancybox-thumbs";e.fancybox.defaults=e.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},e.fancybox.defaults);var i=function(t){this.init(t)};e.extend(i.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(t){var e=this,n=t.group,i=0;e.instance=t,e.opts=n[t.currIndex].opts.thumbs,t.Thumbs=e,e.$button=t.$refs.toolbar.find("[data-fancybox-thumbs]");for(var o=0,s=n.length;o<s&&(n[o].thumb&&i++,!(i>1));o++);i>1&&e.opts?(e.$button.removeAttr("style").on("click",function(){e.toggle()}),e.isActive=!0):e.$button.hide()},create:function(){var t,i=this.instance,o=this.opts.parentEl,s=[];this.$grid||(this.$grid=e('<div class="'+n+" "+n+"-"+this.opts.axis+'"></div>').appendTo(i.$refs.container.find(o).addBack().filter(o)),this.$grid.on("click","a",function(){i.jumpTo(e(this).attr("data-index"))})),this.$list||(this.$list=e('<div class="'+n+'__list">').appendTo(this.$grid)),e.each(i.group,function(e,n){(t=n.thumb)||"image"!==n.type||(t=n.src),s.push('<a href="javascript:;" tabindex="0" data-index="'+e+'"'+(t&&t.length?' style="background-image:url('+t+')"':'class="fancybox-thumbs-missing"')+"></a>")}),this.$list[0].innerHTML=s.join(""),"x"===this.opts.axis&&this.$list.width(parseInt(this.$grid.css("padding-right"),10)+i.group.length*this.$list.children().eq(0).outerWidth(!0))},focus:function(t){var e,n,i=this.$list,o=this.$grid;this.instance.current&&(n=(e=i.children().removeClass("fancybox-thumbs-active").filter('[data-index="'+this.instance.current.index+'"]').addClass("fancybox-thumbs-active")).position(),"y"===this.opts.axis&&(n.top<0||n.top>i.height()-e.outerHeight())?i.stop().animate({scrollTop:i.scrollTop()+n.top},t):"x"===this.opts.axis&&(n.left<o.scrollLeft()||n.left>o.scrollLeft()+(o.width()-e.outerWidth()))&&i.parent().stop().animate({scrollLeft:n.left},t))},update:function(){this.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.instance.trigger("onThumbsShow"),this.focus(0)):this.$grid&&this.instance.trigger("onThumbsHide"),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),e(t).on({"onInit.fb":function(t,e){var n;e&&!e.Thumbs&&(n=new i(e)).isActive&&!0===n.opts.autoStart&&n.show()},"beforeShow.fb":function(t,e,n,i){var o=e&&e.Thumbs;o&&o.isVisible&&o.focus(i?0:250)},"afterKeydown.fb":function(t,e,n,i,o){var s=e&&e.Thumbs;s&&s.isActive&&71===o&&(i.preventDefault(),s.toggle())},"beforeClose.fb":function(t,e){var n=e&&e.Thumbs;n&&n.isVisible&&!1!==n.opts.hideOnClose&&n.$grid.hide()}})}(document,jQuery),function(t,e){"use strict";e.extend(!0,e.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(t,e){return!t.currentHash&&"inline"!==e.type&&"html"!==e.type&&(e.origSrc||e.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),e(t).on("click","[data-fancybox-share]",function(){var t,n,i,o,s=e.fancybox.getInstance(),r=s.current||null;r&&("function"===e.type(r.opts.share.url)&&(t=r.opts.share.url.apply(r,[s,r])),n=r.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===r.type?encodeURIComponent(r.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(t)).replace(/\{\{url_raw\}\}/g,(i=t,o={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},String(i).replace(/[&<>"'`=\/]/g,function(t){return o[t]}))).replace(/\{\{descr\}\}/g,s.$caption?encodeURIComponent(s.$caption.text()):""),e.fancybox.open({src:s.translate(s,n),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(t,e){s.$refs.container.one("beforeClose.fb",function(){t.close(null,0)}),e.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(t,e,n){"use strict";function i(){var e=t.location.hash.substr(1),n=e.split("-"),i=n.length>1&&/^\+?\d+$/.test(n[n.length-1])&&parseInt(n.pop(-1),10)||1;return{hash:e,index:i<1?1:i,gallery:n.join("-")}}function o(t){""!==t.gallery&&n("[data-fancybox='"+n.escapeSelector(t.gallery)+"']").eq(t.index-1).focus().trigger("click.fb-start")}function s(t){var e,n;return!!t&&(""!==(n=(e=t.current?t.current.opts:t.opts).hash||(e.$orig?e.$orig.data("fancybox")||e.$orig.data("fancybox-trigger"):""))&&n)}n.escapeSelector||(n.escapeSelector=function(t){return(t+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t})}),n(function(){!1!==n.fancybox.defaults.hash&&(n(e).on({"onInit.fb":function(t,e){var n,o;!1!==e.group[e.currIndex].opts.hash&&(n=i(),(o=s(e))&&n.gallery&&o==n.gallery&&(e.currIndex=n.index-1))},"beforeShow.fb":function(n,i,o,r){var a;o&&!1!==o.opts.hash&&(a=s(i))&&(i.currentHash=a+(i.group.length>1?"-"+(o.index+1):""),t.location.hash!=="#"+i.currentHash&&(r&&!i.origHash&&(i.origHash=t.location.hash),i.hashTimer&&clearTimeout(i.hashTimer),i.hashTimer=setTimeout(function(){"replaceState"in t.history?(t.history[r?"pushState":"replaceState"]({},e.title,t.location.pathname+t.location.search+"#"+i.currentHash),r&&(i.hasCreatedHistory=!0)):t.location.hash=i.currentHash,i.hashTimer=null},300)))},"beforeClose.fb":function(n,i,o){!1!==o.opts.hash&&(clearTimeout(i.hashTimer),i.currentHash&&i.hasCreatedHistory?t.history.back():i.currentHash&&("replaceState"in t.history?t.history.replaceState({},e.title,t.location.pathname+t.location.search+(i.origHash||"")):t.location.hash=i.origHash),i.currentHash=null)}}),n(t).on("hashchange.fb",function(){var t=i(),e=null;n.each(n(".fancybox-container").get().reverse(),function(t,i){var o=n(i).data("FancyBox");if(o&&o.currentHash)return e=o,!1}),e?e.currentHash===t.gallery+"-"+t.index||1===t.index&&e.currentHash==t.gallery||(e.currentHash=null,e.close()):""!==t.gallery&&o(t)}),setTimeout(function(){n.fancybox.getInstance()||o(i())},50))})}(window,document,jQuery),function(t,e){"use strict";var n=(new Date).getTime();e(t).on({"onInit.fb":function(t,e,i){e.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(t){var i=e.current,o=(new Date).getTime();e.group.length<2||!1===i.opts.wheel||"auto"===i.opts.wheel&&"image"!==i.type||(t.preventDefault(),t.stopPropagation(),i.$slide.hasClass("fancybox-animated")||(t=t.originalEvent||t,o-n<250||(n=o,e[(-t.deltaY||-t.deltaX||t.wheelDelta||-t.detail)<0?"next":"previous"]())))})}})}(document,jQuery),function(t){t(document).ready(function(){e.init()});var e={init:function(){this.accessibility(),this.utils(),this.menu(),console.log("App here!")},accessibility:function(){t("#high-contrast-btn").click(function(e){e.preventDefault(),"on"===cookie("high-contrast")?(cookie("high-contrast","off"),t("body").removeClass("high-contrast")):(cookie("high-contrast","on"),t("body").addClass("high-contrast"))})},menu:function(){t("#menu-toggle").click(function(){t("body").toggleClass("menu-active")}),t("#menu-wrapper, #menu-toggle").click(function(t){t.stopPropagation()}),t("#main-header").click(function(e){t("body").removeClass("menu-active")}),t(".widget_nav_menu").click(function(){t(this).toggleClass("active")})},utils:function(){t('[data-toggle="tooltip"]').tooltip(),t(".gallery").length&&(t(".gallery-item").each(function(){var e=t(this).find(".gallery-caption").text();t(this).find("a").attr("data-caption",e)}),t(".gallery-item a").attr("data-fancybox","group"),t(".gallery-item a").fancybox({})),t(".toggle-active").click(function(){t(this).parent().toggleClass("active")}),t("a.share-link").on("click",function(e){e.preventDefault(),function(t){window.open(t,"shareWindow","width=600, height=400")}(t(this).attr("href"))})},agenda:function(){t("#datepicker").datepicker({dayNamesMin:["Dom","Seg","Ter","Qua","Qui","Sex","Sab"]}),t(".monthpicker").on("click",function(e){e.preventDefault(),t(".monthpicker").datepicker("show")})}}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
